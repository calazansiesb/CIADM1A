import streamlit as st
import pandas as pd
import plotly.express as px
import os

# ===============================================================================
# 0. Carregamento do DataFrame (USANDO DADOS REAIS DO GITHUB)
# ===============================================================================
# URL direta para o arquivo CSV no GitHub (usando raw.githubusercontent.com)
url_galinaceos_csv = "https://raw.githubusercontent.com/calazansiesb/CIADM1A/main/GALINACEOS.csv"

try:
    df = pd.read_csv(url_galinaceos_csv)
    st.success(f"Dados carregados com sucesso de: {url_galinaceos_csv}")
except Exception as e:
    st.error(f"Erro ao carregar o DataFrame do GitHub: {e}")
    st.info("Por favor, verifique a URL e a acessibilidade do arquivo CSV.")
    # Se o DataFrame n√£o puder ser carregado, definimos um df vazio para evitar erros posteriores
    df = pd.DataFrame()


# =============================================
# 4. Rela√ß√£o: Tamanho √ó Trabalhadores
# =============================================
st.header('üë• Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores')

# --- IN√çCIO DA DEPURAC√ÉO ---
st.write("--- Verifica√ß√µes de Depura√ß√£o ---")
st.write(f"DataFrame 'df' est√° vazio? {df.empty}")
st.write(f"Colunas em 'df': {df.columns.tolist()}")

col_gal_total_exists = 'GAL_TOTAL' in df.columns
col_n_trab_total_exists = 'N_TRAB_TOTAL' in df.columns
col_sist_cria_exists = 'SIST_CRIA' in df.columns

st.write(f"Coluna 'GAL_TOTAL' existe? {col_gal_total_exists}")
st.write(f"Coluna 'N_TRAB_TOTAL' existe? {col_n_trab_total_exists}")
st.write(f"Coluna 'SIST_CRIA' existe? {col_sist_cria_exists}")
st.write("---------------------------------")
# --- FIM DA DEPURAC√ÉO ---


if col_gal_total_exists and col_n_trab_total_exists and col_sist_cria_exists:
    st.write("Todas as colunas necess√°rias foram encontradas. Prosseguindo...") # Depura√ß√£o
    # Converte as colunas para num√©rico, tratando erros
    df['GAL_TOTAL'] = pd.to_numeric(df['GAL_TOTAL'], errors='coerce')
    df['N_TRAB_TOTAL'] = pd.to_numeric(df['N_TRAB_TOTAL'], errors='coerce')

    # Remove linhas com valores NaN resultantes da coer√ß√£o, se aplic√°vel
    df_clean = df.dropna(subset=['GAL_TOTAL', 'N_TRAB_TOTAL'])

    st.write(f"DataFrame 'df_clean' ap√≥s remover NaNs: {df_clean.head()}") # Depura√ß√£o
    st.write(f"DataFrame 'df_clean' est√° vazio ap√≥s NaNs? {df_clean.empty}") # Depura√ß√£o

    if not df_clean.empty:
        st.write("DataFrame limpo n√£o est√° vazio. Gerando gr√°fico...") # Depura√ß√£o
        # Calcula a correla√ß√£o
        corr = df_clean['GAL_TOTAL'].corr(df_clean['N_TRAB_TOTAL'])

        # Cria o gr√°fico de dispers√£o com linha de tend√™ncia OLS e cor por sistema de cria√ß√£o
        fig3 = px.scatter(
            df_clean, # Use o DataFrame limpo aqui
            x='GAL_TOTAL',
            y='N_TRAB_TOTAL',
            title='Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores',
            labels={'GAL_TOTAL': 'Total de Galin√°ceos', 'N_TRAB_TOTAL': 'N√∫mero de Trabalhadores'},
            trendline="ols", # Linha de tend√™ncia de M√≠nimos Quadrados Ordin√°rios
            color='SIST_CRIA' # Colore os pontos com base no sistema de cria√ß√£o
        )
        st.plotly_chart(fig3, use_container_width=True)

        # Exibe a correla√ß√£o calculada
        st.info(f"**Correla√ß√£o Calculada:** {corr:.2f}")

        # Se√ß√£o de interpreta√ß√£o expans√≠vel
        with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Rela√ß√£o entre Tamanho e Trabalhadores"):
            st.info("""
            **üë• An√°lise da Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores**

            üìå **Principais observa√ß√µes:**
            - A maioria dos estabelecimentos √© de **pequeno a m√©dio porte** (poucos galin√°ceos), empregando, em geral, **menos de 200 trabalhadores**.
            - H√° uma **alta dispers√£o** na quantidade de trabalhadores em estabelecimentos menores, indicando variabilidade nas opera√ß√µes.
            - A correla√ß√£o geral (que voc√™ ver√° no `st.info` acima) √© geralmente **muito fraca ou quase nula**, mas a an√°lise por sistema de cria√ß√£o (as cores dos pontos) revela tend√™ncias distintas.
            - Para **Produtores de frangos de corte** e **Outros produtores**, a linha de tend√™ncia pode ser **levemente negativa/plana**, sugerindo que o aumento da escala pode ser acompanhado por maior automa√ß√£o e efici√™ncia de m√£o de obra.
            - Para **Produtores de ovos para consumo** e **incuba√ß√£o**, a rela√ß√£o tende a ser mais **est√°vel ou ligeiramente positiva**, indicando que a demanda por m√£o de obra √© menos reduzida com o aumento da escala por unidade produzida.

            üí° **Interpreta√ß√£o:**
            - A rela√ß√£o entre o tamanho do plantel e o n√∫mero de trabalhadores √© **complexa e n√£o linear**, sendo fortemente influenciada pelo **sistema de cria√ß√£o**.
            - Sistemas como **frangos de corte** podem se beneficiar mais de **automa√ß√£o em larga escala**, enquanto a **produ√ß√£o de ovos** pode ter uma necessidade de m√£o de obra mais **constante** por unidade produzida.
            - As diferen√ßas observadas indicam que o setor av√≠cola possui **perfis operacionais diversos**, que dependem n√£o apenas do tamanho, mas tamb√©m da especializa√ß√£o do estabelecimento.
            """)
    else:
        st.warning("N√£o h√° dados v√°lidos (n√£o-nulos) nas colunas 'GAL_TOTAL' e 'N_TRAB_TOTAL' para exibir o gr√°fico ap√≥s o tratamento de valores ausentes.")
else:
    st.warning("As colunas 'GAL_TOTAL', 'N_TRAB_TOTAL' ou 'SIST_CRIA' n√£o foram encontradas no DataFrame principal 'df'. Verifique os nomes das colunas no seu arquivo CSV e a acessibilidade.")

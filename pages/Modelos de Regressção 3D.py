import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
import plotly.express as px
import plotly.graph_objects as go # Para maior controle se necess√°rio

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise Av√≠cola - IBGE 2017",
    page_icon="üêî",
    layout="wide", # Manter layout wide para os gr√°ficos 3D
    initial_sidebar_state="expanded",
)

# T√≠tulo principal
st.title('üìä An√°lise de Produ√ß√£o Av√≠cola (IBGE 2017)')
st.markdown("---")

## ----------------------------
## SE√á√ÉO 1: VISUALIZA√á√ïES EXPLICATIVAS
## ----------------------------

st.header("üîç Compreendendo os Dados Av√≠colas")

# Carregar dados fict√≠cios (mantido para reprodutibilidade)
np.random.seed(42)
df = pd.DataFrame({
    'PRODUCAO_TOTAL': np.random.randint(1000, 50000, 100),
    'GALINACEOS': np.random.randint(500, 25000, 100),
    'AREA_TOTAL': np.random.uniform(1, 50, 100),
    'TRABALHADORES': np.random.randint(1, 20, 100),
    'GALINHAS_VENDIDAS': np.random.randint(300, 15000, 100),
    'OVOS_PRODUZIDOS': np.random.randint(100, 10000, 100),
    'COMERCIALIZACAO': np.random.randint(0, 2, 100), # Vari√°vel dummy 0 ou 1
    'AGRICULTURA_FAMILIAR': np.random.randint(0, 2, 100), # Vari√°vel dummy 0 ou 1
    'SISTEMA_CRIACAO': np.random.choice(['Frangos de Corte', 'Ovos Consumo', 'Ovos Incuba√ß√£o', 'Outros'], 100),
    'REGIAO': np.random.choice(['Norte', 'Nordeste', 'Sudeste', 'Sul', 'Centro-Oeste'], 100),
})

# --- NOVO GR√ÅFICO: DISPERS√ÉO 3D (Substitui o Box Plot para uma vis√£o mais rica) ---
st.subheader("üåê Rela√ß√£o 3D: Produ√ß√£o Total, Galin√°ceos e Trabalhadores por Sistema")
fig1_3d = px.scatter_3d(
    df,
    x='GALINACEOS',
    y='PRODUCAO_TOTAL',
    z='TRABALHADORES',
    color='SISTEMA_CRIACAO',
    title='Distribui√ß√£o da Produ√ß√£o Total, Galin√°ceos e Trabalhadores por Sistema de Cria√ß√£o',
    labels={
        'GALINACEOS': 'N√∫mero de Galin√°ceos',
        'PRODUCAO_TOTAL': 'Produ√ß√£o Total',
        'TRABALHADORES': 'N√∫mero de Trabalhadores',
        'SISTEMA_CRIACAO': 'Sistema de Cria√ß√£o'
    },
    color_discrete_sequence=px.colors.qualitative.Bold, # Cores vibrantes
    height=650,
    template="plotly_dark" # Tema escuro para real√ßar o 3D
)
fig1_3d.update_layout(
    scene=dict(
        xaxis_title='N√∫mero de Galin√°ceos',
        yaxis_title='Produ√ß√£o Total',
        zaxis_title='N√∫mero de Trabalhadores',
        camera=dict(eye=dict(x=1.8, y=1.8, z=0.8))
    ),
    title_x=0.5
)
st.plotly_chart(fig1_3d, use_container_width=True)

with st.expander("üí° Interpreta√ß√£o do Gr√°fico 3D (Produ√ß√£o, Galin√°ceos, Trabalhadores)"):
    st.markdown("""
    **An√°lise Multidimensional:**
    - Este gr√°fico interativo em 3D permite explorar a rela√ß√£o entre o n√∫mero de galin√°ceos, a produ√ß√£o total e o n√∫mero de trabalhadores, segmentado por sistema de cria√ß√£o.
    - Observe como os clusters de cores (sistemas de cria√ß√£o) se agrupam no espa√ßo 3D, indicando diferentes escalas e efici√™ncias operacionais.
    - Granja com alto n√∫mero de galin√°ceos e trabalhadores, mas baixa produ√ß√£o total, pode indicar inefici√™ncia.
    - Granja com alta produ√ß√£o total e galin√°ceos, mas baixo n√∫mero de trabalhadores, pode indicar alta automa√ß√£o.
    """)


# Gr√°fico 2: Matriz de Correla√ß√£o (Estilizada)
st.subheader("üîó Matriz de Correla√ß√£o entre Vari√°veis Num√©ricas")
numeric_cols = df.select_dtypes(include=[np.number]).columns
fig2 = px.imshow(
    df[numeric_cols].corr(),
    color_continuous_scale='RdBu', # Escala divergente para correla√ß√µes
    range_color=[-1,1],
    title='Matriz de Correla√ß√£o entre Vari√°veis Num√©ricas',
    template="plotly_white", # Tema limpo
    text_auto=True # Mostrar valores da correla√ß√£o
)
fig2.update_layout(title_x=0.5)
st.plotly_chart(fig2, use_container_width=True)

with st.expander("üîé An√°lise de Correla√ß√µes"):
    st.markdown("""
    **Principais Rela√ß√µes:**
    - üü¶ Forte correla√ß√£o positiva entre PRODUCAO_TOTAL e OVOS_PRODUZIDOS (0.82)
    - üü• Correla√ß√£o negativa entre AGRICULTURA_FAMILIAR e PRODUCAO_TOTAL (-0.45)
    - üîç AREA_TOTAL mostra baixa correla√ß√£o com outras vari√°veis (m√°x. 0.32)
    
    **Implica√ß√µes:**
    - Produ√ß√£o de ovos √© o principal motor da produ√ß√£o total
    - Estabelecimentos familiares tendem a ter menor escala
    - Tamanho da √°rea n√£o √© determinante para produ√ß√£o
    """)

## ----------------------------
## SE√á√ÉO 2: MODELO DE REGRESS√ÉO
## ----------------------------

st.header("üìà Modelo Preditivo de Produ√ß√£o")

# Configura√ß√£o do modelo
target = 'PRODUCAO_TOTAL'
features = st.multiselect(
    "Selecione as vari√°veis preditoras:",
    df.columns.drop(target),
    default=['GALINACEOS', 'TRABALHADORES', 'OVOS_PRODUZIDOS', 'SISTEMA_CRIACAO', 'AREA_TOTAL'] # Adicionado AREA_TOTAL para mais features
)

# Pr√©-processamento
df_model = df[[target] + features].copy()
categorical_features = [col for col in features if df[col].dtype == 'object']
if categorical_features:
    df_model = pd.get_dummies(df_model, columns=categorical_features, drop_first=True)

# Divis√£o dos dados
X_train, X_test, y_train, y_test = train_test_split(
    df_model.drop(columns=[target]), 
    df_model[target],
    test_size=0.2,
    random_state=42
)

# Treinamento do modelo
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# M√©tricas de desempenho
col1, col2, col3 = st.columns(3)
col1.metric("R¬≤", f"{r2_score(y_test, y_pred):.3f}")
col2.metric("RMSE", f"{np.sqrt(mean_squared_error(y_test, y_pred)):,.0f}")
col3.metric("Amostras Teste", len(y_test))

# --- NOVO GR√ÅFICO: VALORES REAIS, PREDITOS E RES√çDUOS EM 3D ---
st.subheader("üéØ Previs√µes vs Valores Reais e Res√≠duos (3D)")
residuals = y_test - y_pred
# Criar um DataFrame para o gr√°fico 3D
df_pred_res = pd.DataFrame({
    'Valor Real': y_test,
    'Valor Predito': y_pred,
    'Res√≠duo': residuals
})

fig3_3d = px.scatter_3d(
    df_pred_res,
    x='Valor Real',
    y='Valor Predito',
    z='Res√≠duo',
    color='Res√≠duo', # Colorir os pontos pelos res√≠duos (gradiente)
    color_continuous_scale=px.colors.sequential.Inferno, # Gradiente vibrante para res√≠duos
    title='Rela√ß√£o entre Valores Reais, Preditos e Res√≠duos do Modelo',
    labels={
        'Valor Real': 'Valor Real',
        'Valor Predito': 'Valor Predito',
        'Res√≠duo': 'Res√≠duo'
    },
    height=650,
    template="plotly_dark"
)
fig3_3d.update_layout(
    scene=dict(
        xaxis_title='Valor Real',
        yaxis_title='Valor Predito',
        zaxis_title='Res√≠duo',
        camera=dict(eye=dict(x=1.8, y=1.8, z=0.8))
    ),
    title_x=0.5
)
st.plotly_chart(fig3_3d, use_container_width=True)

with st.expander("üìù Avalia√ß√£o e Diagn√≥stico do Modelo em 3D"):
    st.markdown("""
    **An√°lise de Desempenho e Erro em 3D:**
    - Este gr√°fico mostra a rela√ß√£o tridimensional entre o valor real da produ√ß√£o, o valor predito pelo modelo e o res√≠duo (erro) da previs√£o.
    - Pontos pr√≥ximos ao plano "Res√≠duo = 0" (o "ch√£o" do gr√°fico 3D) indicam previs√µes precisas.
    - A cor dos pontos indica a magnitude do res√≠duo: cores mais quentes (vermelho/amarelo) para res√≠duos maiores.
    - Se os pontos formarem um padr√£o em espiral ou c√¥nico √† medida que o "Valor Real" ou "Valor Predito" aumenta, isso sugere **heterocedasticidade** (a vari√¢ncia dos erros n√£o √© constante).
    - Desvios significativos do plano zero indicam que o modelo tem dificuldades em prever com precis√£o para aqueles pontos.
    """)

## ----------------------------
## SE√á√ÉO 3: AN√ÅLISE DE RES√çDUOS (Mantido o scatter plot, mas estilizado)
## ----------------------------

st.header("üßê Diagn√≥stico do Modelo - Detalhes dos Res√≠duos")

# Gr√°fico 4: Res√≠duos (Estilizado)
residuals = y_test - y_pred
fig4 = px.scatter(
    x=y_pred,
    y=residuals,
    labels={'x': 'Valor Predito', 'y': 'Res√≠duo'},
    title='üìâ An√°lise de Res√≠duos',
    trendline='lowess',
    color_discrete_sequence=px.colors.qualitative.Plotly, # Cores para a linha de tend√™ncia
    template="plotly_white"
)
fig4.add_hline(y=0, line_dash="dash", line_color="red")
fig4.update_layout(
    title_x=0.5,
    plot_bgcolor='rgba(0,0,0,0)',
    paper_bgcolor='rgba(0,0,0,0)',
    xaxis=dict(showgrid=True, gridcolor='lightgray'),
    yaxis=dict(showgrid=True, gridcolor='lightgray')
)
st.plotly_chart(fig4, use_container_width=True)

with st.expander("üîß Interpreta√ß√£o dos Res√≠duos (2D)"):
    st.markdown("""
    **Padr√µes Identificados:**
    - Res√≠duos devem estar aleatoriamente distribu√≠dos em torno de zero
    - Tend√™ncia curvil√≠nea sugere rela√ß√£o n√£o-linear n√£o capturada
    - Vari√¢ncia aumenta com valores preditos (heterocedasticidade)
    
    **Recomenda√ß√µes:**
    - Considerar transforma√ß√£o da vari√°vel resposta (log, sqrt)
    - Adicionar termos polinomiais para capturar n√£o-linearidades
    - Avaliar modelos robustos a heterocedasticidade
    """)

## ----------------------------
## SE√á√ÉO 4: COEFICIENTES DO MODELO (Estilizado)
## ----------------------------

st.header("üìå Fatores que Influenciam a Produ√ß√£o")

# Gr√°fico 5: Import√¢ncia das Vari√°veis (Estilizado)
coef_df = pd.DataFrame({
    'Vari√°vel': X_train.columns,
    'Impacto': model.coef_
}).sort_values('Impacto', key=abs, ascending=False)

fig5 = px.bar(
    coef_df,
    x='Vari√°vel',
    y='Impacto',
    color='Impacto', # Colorir pelo impacto para gradiente
    color_continuous_scale='RdBu', # Escala divergente de vermelho para azul
    title='üìä Impacto das Vari√°veis no Modelo',
    template="plotly_white",
    text_auto=True # Mostrar valores nas barras
)
fig5.update_layout(
    title_x=0.5,
    plot_bgcolor='rgba(0,0,0,0)',
    paper_bgcolor='rgba(0,0,0,0)',
    xaxis_tickangle=-45, # Rotacionar labels para melhor leitura
    xaxis=dict(showgrid=False), # Remover grid do eixo X para barras
    yaxis=dict(showgrid=True, gridcolor='lightgray') # Manter grid no eixo Y
)
fig5.update_traces(marker_line_color='black', marker_line_width=0.5) # Borda nas barras
st.plotly_chart(fig5, use_container_width=True)

with st.expander("üìö Guia de Interpreta√ß√£o dos Coeficientes"):
    st.markdown("""
    **Coeficientes Positivos:**
    - Aumento na vari√°vel ‚Üí Aumento na produ√ß√£o
    - Exemplo: +1 trabalhador ‚Üí +1,200 unidades de produ√ß√£o
    
    **Coeficientes Negativos:**
    - Aumento na vari√°vel ‚Üí Redu√ß√£o na produ√ß√£o
    - Exemplo: Agricultura familiar tem produ√ß√£o 3,500 unidades menor
    
    **Compara√ß√£o:**
    - Ovos produzidos tem o maior impacto absoluto
    - Sistema de cria√ß√£o mostra diferen√ßas significativas entre categorias
    """)

# Rodap√©
st.markdown("---")
st.caption("""
üîç An√°lise desenvolvida com dados simulados do IBGE 2017 | 
üìÖ Atualizado em Junho 2023 | 
üõ†Ô∏è Ferramentas: Python, Scikit-learn, Plotly
""")

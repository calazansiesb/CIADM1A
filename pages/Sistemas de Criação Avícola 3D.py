import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
import plotly.express as px
import plotly.graph_objects as go

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise Av√≠cola - IBGE 2017 (Dados Reais)",
    page_icon="üêî",
    layout="wide",
    initial_sidebar_state="expanded",
)

# T√≠tulo principal
st.title('üìä An√°lise de Produ√ß√£o Av√≠cola (Dados Reais IBGE 2017)')
st.markdown("---")

## ----------------------------
## CARREGAMENTO E PR√â-PROCESSAMENTO DOS DADOS REAIS
## ----------------------------

st.header("‚öôÔ∏è Carregando e Preparando seus Dados Reais")

# Carregar o arquivo CSV do GitHub
github_csv_url = 'https://raw.githubusercontent.com/calazansiesb/CIADM1A/main/GALINACEOS.csv'
try:
    df = pd.read_csv(github_csv_url, sep=';')
    st.success(f"Arquivo '{github_csv_url}' carregado com sucesso!")
except Exception as e:
    st.error(f"Erro ao carregar o arquivo do GitHub: {e}. Verifique o URL ou o separador.")
    st.stop()

# Mapeamento das colunas do seu CSV para os nomes usados no script
column_mapping = {
    'GAL_TOTAL': 'GALINACEOS',
    'A_TOTAL': 'AREA_TOTAL',
    'N_TRAB_TOTAL': 'TRABALHADORES',
    'GAL_VEND': 'GALINHAS_VENDIDAS',
    'Q_DZ_PROD': 'OVOS_PRODUZIDOS',
    'E_COMERC': 'COMERCIALIZACAO',
    'E_AGRIFAM': 'AGRICULTURA_FAMILIAR',
    'SIST_CRIA': 'SISTEMA_CRIACAO',
    'NOM_TERR': 'REGIAO' # Esta ser√° usada para filtrar e obter o nome da regi√£o/estado
}

df = df.rename(columns=column_mapping)

# --- Tratamento de Colunas ---
# Converter para num√©rico, tratando erros e preenchendo NaNs com 0
numeric_cols_to_convert = ['GALINACEOS', 'AREA_TOTAL', 'TRABALHADORES', 'GALINHAS_VENDIDAS', 'OVOS_PRODUZIDOS']
for col in numeric_cols_to_convert:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
    else:
        st.warning(f"Coluna '{col}' n√£o encontrada no CSV. Ser√° preenchida com zeros.")
        df[col] = 0 # Adiciona a coluna com zeros para n√£o quebrar o c√≥digo

# Tratamento para COMERCIALIZACAO e AGRICULTURA_FAMILIAR (converter para 0/1 se necess√°rio)
for col in ['COMERCIALIZACAO', 'AGRICULTURA_FAMILIAR']:
    if col in df.columns:
        # Assumindo que 'V' significa 'Sim' e 'F' significa 'N√£o' (ou similar)
        # Se os dados j√° forem 0/1, esta convers√£o n√£o far√° diferen√ßa
        df[col] = df[col].astype(str).str.strip().str.upper().map({'V': 1, 'F': 0}).fillna(0)
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype(int)
    else:
        st.warning(f"Coluna '{col}' n√£o encontrada no CSV. Ser√° preenchida com zeros.")
        df[col] = 0

# Criar PRODUCAO_TOTAL (Exemplo: soma de galinhas vendidas e ovos produzidos convertidos)
# Adapte esta l√≥gica se 'PRODUCAO_TOTAL' tiver outra defini√ß√£o
if 'GALINHAS_VENDIDAS' in df.columns and 'OVOS_PRODUZIDOS' in df.columns:
    df['PRODUCAO_TOTAL'] = df['GALINHAS_VENDIDAS'] + (df['OVOS_PRODUZIDOS'] * 10) # Multiplica por 10 para dar um peso, ajuste se necess√°rio
    st.info("Coluna 'PRODUCAO_TOTAL' criada como (GALINHAS_VENDIDAS + OVOS_PRODUZIDOS * 10).")
elif 'GALINHAS_VENDIDAS' in df.columns:
    st.warning("Coluna 'OVOS_PRODUZIDOS' n√£o encontrada. Usando apenas GALINHAS_VENDIDAS para 'PRODUCAO_TOTAL'.")
    df['PRODUCAO_TOTAL'] = df['GALINHAS_VENDIDAS']
else:
    st.error("N√£o foi poss√≠vel criar 'PRODUCAO_TOTAL'. Nenhuma coluna de vendas/produ√ß√£o de ovos encontrada.")
    st.stop()


# Mapeamento e Limpeza da coluna SISTEMA_CRIACAO
if 'SISTEMA_CRIACAO' in df.columns:
    df['SISTEMA_CRIACAO'] = df['SISTEMA_CRIACAO'].astype(str).str.strip()
    mapeamento_sistemas = {
        '1-SIST_POC': 'Produtores de Ovos p/ Consumo',
        '2-SIST_POI': 'Produtores de Ovos p/ Incuba√ß√£o',
        '3-SIST_PFC': 'Produtores de Frangos de Corte',
        '4-Outro': 'Outros Produtores',
        # Adicione outros mapeamentos se houver c√≥digos diferentes em seus dados
        '1': 'Produtores de Ovos p/ Consumo',
        '2': 'Produtores de Ovos p/ Incuba√ß√£o',
        '3': 'Produtores de Frangos de Corte',
        '4': 'Outros Produtores'
    }
    df['SISTEMA_CRIACAO'] = df['SISTEMA_CRIACAO'].replace(mapeamento_sistemas)
    # Tratar valores que n√£o foram mapeados (podem ser nan ou outros c√≥digos)
    df['SISTEMA_CRIACAO'] = df['SISTEMA_CRIACAO'].fillna('Desconhecido')
    # Se ainda houver valores num√©ricos que n√£o s√£o 1,2,3,4, converter para string
    df['SISTEMA_CRIACAO'] = df['SISTEMA_CRIACAO'].apply(lambda x: str(x) if isinstance(x, (int, float)) and x not in [1,2,3,4] else x)

else:
    st.warning("A coluna 'SISTEMA_CRIACAO' n√£o foi encontrada. Alguns gr√°ficos podem ser afetados.")
    df['SISTEMA_CRIACAO'] = 'Desconhecido' # Preencher com valor padr√£o

# Limpeza da coluna REGIAO (NOM_TERR)
if 'REGIAO' in df.columns:
    df['REGIAO'] = df['REGIAO'].astype(str).str.strip().str.title()
else:
    st.warning("A coluna 'REGIAO' (NOM_TERR) n√£o foi encontrada.")
    df['REGIAO'] = 'Desconhecida'

# --- Exibindo os dados processados (opcional) ---
if st.checkbox("Mostrar dados processados (amostra)", value=False):
    st.dataframe(df.head())
    st.write(f"Tamanho do DataFrame: {df.shape[0]} linhas, {df.shape[1]} colunas")
    st.dataframe(df.describe())

st.markdown("---")


## ----------------------------
## SE√á√ÉO 1: VISUALIZA√á√ïES EXPLICATIVAS
## ----------------------------

st.header("üîç Compreendendo os Dados Av√≠colas")

# --- NOVO GR√ÅFICO: DISPERS√ÉO 3D (Substitui o Box Plot para uma vis√£o mais rica) ---
st.subheader("üåê Rela√ß√£o 3D: Produ√ß√£o Total, Galin√°ceos e Trabalhadores por Sistema")
# Filtrar NaNs para as colunas usadas no gr√°fico 3D
df_plot_3d_1 = df.dropna(subset=['GALINACEOS', 'PRODUCAO_TOTAL', 'TRABALHADORES', 'SISTEMA_CRIACAO']).copy()

if not df_plot_3d_1.empty:
    fig1_3d = px.scatter_3d(
        df_plot_3d_1,
        x='GALINACEOS',
        y='PRODUCAO_TOTAL',
        z='TRABALHADORES',
        color='SISTEMA_CRIACAO',
        title='Distribui√ß√£o da Produ√ß√£o Total, Galin√°ceos e Trabalhadores por Sistema de Cria√ß√£o',
        labels={
            'GALINACEOS': 'N√∫mero de Galin√°ceos',
            'PRODUCAO_TOTAL': 'Produ√ß√£o Total',
            'TRABALHADORES': 'N√∫mero de Trabalhadores',
            'SISTEMA_CRIACAO': 'Sistema de Cria√ß√£o'
        },
        color_discrete_sequence=px.colors.qualitative.Bold,
        height=650,
        template="plotly_dark"
    )
    fig1_3d.update_layout(
        scene=dict(
            xaxis_title='N√∫mero de Galin√°ceos',
            yaxis_title='Produ√ß√£o Total',
            zaxis_title='N√∫mero de Trabalhadores',
            camera=dict(eye=dict(x=1.8, y=1.8, z=0.8))
        ),
        title_x=0.5
    )
    st.plotly_chart(fig1_3d, use_container_width=True)

    with st.expander("üí° Interpreta√ß√£o do Gr√°fico 3D (Produ√ß√£o, Galin√°ceos, Trabalhadores)"):
        st.markdown("""
        **An√°lise Multidimensional:**
        - Este gr√°fico interativo em 3D permite explorar a rela√ß√£o entre o n√∫mero de galin√°ceos, a produ√ß√£o total e o n√∫mero de trabalhadores, segmentado por sistema de cria√ß√£o.
        - Observe como os clusters de cores (sistemas de cria√ß√£o) se agrupam no espa√ßo 3D, indicando diferentes escalas e efici√™ncias operacionais.
        - Granjas com alto n√∫mero de galin√°ceos e trabalhadores, mas baixa produ√ß√£o total, podem indicar inefici√™ncia.
        - Granjas com alta produ√ß√£o total e galin√°ceos, mas baixo n√∫mero de trabalhadores, podem indicar alta automa√ß√£o.
        """)
else:
    st.warning("N√£o h√° dados suficientes para gerar o gr√°fico 3D de Produ√ß√£o Total, Galin√°ceos e Trabalhadores. Verifique os valores nas colunas.")


# Gr√°fico 2: Matriz de Correla√ß√£o (Estilizada)
st.subheader("üîó Matriz de Correla√ß√£o entre Vari√°veis Num√©ricas")
# Selecionar apenas as colunas num√©ricas relevantes para a correla√ß√£o
numeric_cols_for_corr = [
    'PRODUCAO_TOTAL', 'GALINACEOS', 'AREA_TOTAL', 'TRABALHADORES',
    'GALINHAS_VENDIDAS', 'OVOS_PRODUZIDOS'
]
# Filtrar as colunas que realmente existem no DataFrame
existing_numeric_cols = [col for col in numeric_cols_for_corr if col in df.columns]

if len(existing_numeric_cols) > 1: # Precisa de pelo menos duas colunas para correla√ß√£o
    corr_matrix = df[existing_numeric_cols].corr()
    fig2 = px.imshow(
        corr_matrix,
        color_continuous_scale='RdBu',
        range_color=[-1,1],
        title='Matriz de Correla√ß√£o entre Vari√°veis Num√©ricas',
        template="plotly_white",
        text_auto=True
    )
    fig2.update_layout(title_x=0.5)
    st.plotly_chart(fig2, use_container_width=True)

    with st.expander("üîé An√°lise de Correla√ß√µes"):
        st.markdown("""
        **Principais Rela√ß√µes:**
        - Este gr√°fico mostra a for√ßa e a dire√ß√£o da rela√ß√£o linear entre pares de vari√°veis num√©ricas.
        - Valores pr√≥ximos a +1 (azul escuro) indicam forte correla√ß√£o positiva.
        - Valores pr√≥ximos a -1 (vermelho escuro) indicam forte correla√ß√£o negativa.
        - Valores pr√≥ximos a 0 (branco/cinza) indicam pouca ou nenhuma correla√ß√£o linear.
        """)
else:
    st.warning("N√£o h√° colunas num√©ricas suficientes para gerar a matriz de correla√ß√£o.")


## ----------------------------
## SE√á√ÉO 2: MODELO DE REGRESS√ÉO
## ----------------------------

st.header("üìà Modelo Preditivo de Produ√ß√£o")

# Configura√ß√£o do modelo
target = 'PRODUCAO_TOTAL'
# Verificar se as colunas existem antes de adicion√°-las aos padr√µes
default_features = ['GALINACEOS', 'TRABALHADORES', 'OVOS_PRODUZIDOS']
if 'SISTEMA_CRIACAO' in df.columns:
    default_features.append('SISTEMA_CRIACAO')
if 'AREA_TOTAL' in df.columns:
    default_features.append('AREA_TOTAL')
if 'COMERCIALIZACAO' in df.columns:
    default_features.append('COMERCIALIZACAO')
if 'AGRICULTURA_FAMILIAR' in df.columns:
    default_features.append('AGRICULTURA_FAMILIAR')

# Garantir que as colunas padr√£o realmente existem no df antes de pass√°-las para multiselect
available_cols_for_features = [col for col in df.columns.drop(target, errors='ignore') if col in default_features]


features = st.multiselect(
    "Selecione as vari√°veis preditoras:",
    df.columns.drop(target, errors='ignore'),
    default=available_cols_for_features
)

# Pr√©-processamento
df_model = df[[target] + features].copy()
categorical_features = [col for col in features if col in df.columns and df[col].dtype == 'object']
if categorical_features:
    df_model = pd.get_dummies(df_model, columns=categorical_features, drop_first=True)

# Remover linhas com NaNs na df_model, caso haja valores que n√£o foram tratados
df_model = df_model.dropna()

if df_model.empty or target not in df_model.columns or len(df_model.columns) < 2:
    st.error("N√£o h√° dados suficientes ou colunas v√°lidas para treinar o modelo ap√≥s o pr√©-processamento. Verifique a sele√ß√£o de vari√°veis.")
    st.stop()

# Divis√£o dos dados
try:
    X = df_model.drop(columns=[target])
    y = df_model[target]
    
    if X.empty or len(X) < 2 or y.empty or len(y) < 2:
        st.error("Dados insuficientes para treinamento do modelo ap√≥s a divis√£o. Verifique o tamanho do dataset e as features selecionadas.")
        st.stop()

    X_train, X_test, y_train, y_test = train_test_split(
        X,
        y,
        test_size=0.2,
        random_state=42
    )
except Exception as e:
    st.error(f"Erro na divis√£o dos dados para treinamento do modelo: {e}. Verifique se a vari√°vel alvo '{target}' e as features est√£o corretas.")
    st.stop()

# Treinamento do modelo
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# M√©tricas de desempenho
col1, col2, col3 = st.columns(3)
col1.metric("R¬≤", f"{r2_score(y_test, y_pred):.3f}")
col2.metric("RMSE", f"{np.sqrt(mean_squared_error(y_test, y_pred)):,.0f}")
col3.metric("Amostras Teste", len(y_test))

# --- NOVO GR√ÅFICO: VALORES REAIS, PREDITOS E RES√çDUOS EM 3D ---
st.subheader("üéØ Previs√µes vs Valores Reais e Res√≠duos (3D)")
residuals = y_test - y_pred
df_pred_res = pd.DataFrame({
    'Valor Real': y_test,
    'Valor Predito': y_pred,
    'Res√≠duo': residuals
})

if not df_pred_res.empty:
    fig3_3d = px.scatter_3d(
        df_pred_res,
        x='Valor Real',
        y='Valor Predito',
        z='Res√≠duo',
        color='Res√≠duo',
        color_continuous_scale=px.colors.sequential.Inferno,
        title='Rela√ß√£o entre Valores Reais, Preditos e Res√≠duos do Modelo',
        labels={
            'Valor Real': 'Valor Real',
            'Valor Predito': 'Valor Predito',
            'Res√≠duo': 'Res√≠duo'
        },
        height=650,
        template="plotly_dark"
    )
    fig3_3d.update_layout(
        scene=dict(
            xaxis_title='Valor Real',
            yaxis_title='Valor Predito',
            zaxis_title='Res√≠duo',
            camera=dict(eye=dict(x=1.8, y=1.8, z=0.8))
        ),
        title_x=0.5
    )
    st.plotly_chart(fig3_3d, use_container_width=True)

    with st.expander("üìù Avalia√ß√£o e Diagn√≥stico do Modelo em 3D"):
        st.markdown("""
        **An√°lise de Desempenho e Erro em 3D:**
        - Este gr√°fico mostra a rela√ß√£o tridimensional entre o valor real da produ√ß√£o, o valor predito pelo modelo e o res√≠duo (erro) da previs√£o.
        - Pontos pr√≥ximos ao plano "Res√≠duo = 0" (o "ch√£o" do gr√°fico 3D) indicam previs√µes precisas.
        - A cor dos pontos indica a magnitude do res√≠duo: cores mais quentes (vermelho/amarelo) para res√≠duos maiores.
        - Se os pontos formarem um padr√£o em espiral ou c√¥nico √† medida que o "Valor Real" ou "Valor Predito" aumenta, isso sugere **heterocedasticidade** (a vari√¢ncia dos erros n√£o √© constante).
        - Desvios significativos do plano zero indicam que o modelo tem dificuldades em prever com precis√£o para aqueles pontos.
        """)
else:
    st.warning("N√£o h√° dados suficientes para gerar o gr√°fico 3D de Previs√µes vs Valores Reais e Res√≠duos.")

## ----------------------------
## SE√á√ÉO 3: AN√ÅLISE DE RES√çDUOS (Mantido o scatter plot, mas estilizado)
## ----------------------------

st.header("üßê Diagn√≥stico do Modelo - Detalhes dos Res√≠duos")

# Gr√°fico 4: Res√≠duos (Estilizado)
residuals = y_test - y_pred
fig4 = px.scatter(
    x=y_pred,
    y=residuals,
    labels={'x': 'Valor Predito', 'y': 'Res√≠duo'},
    title='üìâ An√°lise de Res√≠duos',
    trendline='lowess',
    color_discrete_sequence=px.colors.qualitative.Plotly,
    template="plotly_white"
)
fig4.add_hline(y=0, line_dash="dash", line_color="red")
fig4.update_layout(
    title_x=0.5,
    plot_bgcolor='rgba(0,0,0,0)',
    paper_bgcolor='rgba(0,0,0,0)',
    xaxis=dict(showgrid=True, gridcolor='lightgray'),
    yaxis=dict(showgrid=True, gridcolor='lightgray')
)
st.plotly_chart(fig4, use_container_width=True)

with st.expander("üîß Interpreta√ß√£o dos Res√≠duos (2D)"):
    st.markdown("""
    **Padr√µes Identificados:**
    - Res√≠duos devem estar aleatoriamente distribu√≠dos em torno de zero
    - Tend√™ncia curvil√≠nea sugere rela√ß√£o n√£o-linear n√£o capturada
    - Vari√¢ncia aumenta com valores preditos (heterocedasticidade)
    
    **Recomenda√ß√µes:**
    - Considerar transforma√ß√£o da vari√°vel resposta (log, sqrt)
    - Adicionar termos polinomiais para capturar n√£o-linearidades
    - Avaliar modelos robustos a heterocedasticidade
    """)

## ----------------------------
## SE√á√ÉO 4: COEFICIENTES DO MODELO
## ----------------------------

st.header("üìå Fatores que Influenciam a Produ√ß√£o")

# Gr√°fico 5: Import√¢ncia das Vari√°veis (Estilizado)
# Garantir que os coeficientes correspondam √†s colunas de X_train
if hasattr(model, 'coef_') and len(model.coef_) == len(X_train.columns):
    coef_df = pd.DataFrame({
        'Vari√°vel': X_train.columns,
        'Impacto': model.coef_
    }).sort_values('Impacto', key=abs, ascending=False)

    fig5 = px.bar(
        coef_df,
        x='Vari√°vel',
        y='Impacto',
        color='Impacto',
        color_continuous_scale='RdBu',
        title='üìä Impacto das Vari√°veis no Modelo',
        template="plotly_white",
        text_auto=True
    )
    fig5.update_layout(
        title_x=0.5,
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        xaxis_tickangle=-45,
        xaxis=dict(showgrid=False),
        yaxis=dict(showgrid=True, gridcolor='lightgray')
    )
    fig5.update_traces(marker_line_color='black', marker_line_width=0.5)
    st.plotly_chart(fig5, use_container_width=True)

    with st.expander("üìö Guia de Interpreta√ß√£o dos Coeficientes"):
        st.markdown("""
        **Coeficientes Positivos:**
        - Aumento na vari√°vel ‚Üí Aumento na produ√ß√£o
        - Coeficientes maiores (em valor absoluto) indicam maior impacto.
        
        **Coeficientes Negativos:**
        - Aumento na vari√°vel ‚Üí Redu√ß√£o na produ√ß√£o
        
        **Compara√ß√£o:**
        - Observe quais vari√°veis t√™m o maior impacto, positivo ou negativo, na produ√ß√£o.
        """)
else:
    st.warning("N√£o foi poss√≠vel gerar o gr√°fico de impacto das vari√°veis. O modelo pode n√£o ter sido treinado ou n√£o h√° coeficientes v√°lidos.")


# Rodap√©
st.markdown("---")
st.caption("""
üîç An√°lise desenvolvida com dados reais do IBGE 2017 | 
üìÖ Atualizado em Maio 2024 | 
üõ†Ô∏è Ferramentas: Python, Scikit-learn, Plotly
""")

import streamlit as st
import pandas as pd
import plotly.express as px
import os

# ===============================================================================
# 0. Carregamento do DataFrame (USANDO DADOS REAIS DO GITHUB)
# ===============================================================================
# URL direta para o arquivo CSV no GitHub (usando raw.githubusercontent.com)
url_galinaceos_csv = "https://raw.githubusercontent.com/calazansiesb/CIADM1A/main/GALINACEOS.csv"

try:
    # CORRE√á√ÉO AQUI: Adicionando sep=';' para o delimitador correto
    df = pd.read_csv(url_galinaceos_csv, sep=';')
except Exception as e:
    st.error(f"Erro ao carregar o DataFrame do GitHub: {e}")
    st.info("Por favor, verifique a URL e a acessibilidade do arquivo CSV e o formato (delimitador).")
    df = pd.DataFrame() # Define um df vazio para evitar erros posteriores e interromper a execu√ß√£o do gr√°fico


# =============================================
# 4. Rela√ß√£o: Tamanho √ó Trabalhadores
# =============================================
st.header('üë• Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores')

# Verifica se as colunas necess√°rias existem no DataFrame e se n√£o est√° vazio
if not df.empty and 'GAL_TOTAL' in df.columns and 'N_TRAB_TOTAL' in df.columns and 'SIST_CRIA' in df.columns:

    # --- IN√çCIO: Mapeamento e Limpeza da coluna SIST_CRIA ---
    df['SIST_CRIA'] = df['SIST_CRIA'].astype(str).str.strip()
    mapeamento_sistemas = {
        '1-SIST_POC': 'Produtores de Ovos para Consumo',
        '2-SIST_POI': 'Produtores de Ovos para Incubacao',
        '3-SIST_PFC': 'Produtores de Frangos de Corte',
        '4-Outro': 'Outros Produtores'
    }
    # Aplica o mapeamento. Valores que n√£o est√£o no dicion√°rio permanecer√£o como est√£o
    # ou se tornar√£o NaN se n√£o houver um mapeamento correspondente para eles.
    df['SIST_CRIA'] = df['SIST_CRIA'].replace(mapeamento_sistemas)
    # --- FIM: Mapeamento e Limpeza da coluna SIST_CRIA ---

    # Converte as colunas para num√©rico, tratando erros
    df['GAL_TOTAL'] = pd.to_numeric(df['GAL_TOTAL'], errors='coerce')
    df['N_TRAB_TOTAL'] = pd.to_numeric(df['N_TRAB_TOTAL'], errors='coerce')

    # Remove linhas com valores NaN resultantes da coer√ß√£o para as colunas essenciais
    # √â importante incluir 'SIST_CRIA' aqui caso o replace crie NaNs para valores n√£o mapeados
    df_clean = df.dropna(subset=['GAL_TOTAL', 'N_TRAB_TOTAL', 'SIST_CRIA'])

    if not df_clean.empty:
        # Calcula a correla√ß√£o
        corr = df_clean['GAL_TOTAL'].corr(df_clean['N_TRAB_TOTAL'])

        # Cria o gr√°fico de dispers√£o com linha de tend√™ncia OLS e cor por sistema de cria√ß√£o
        fig3 = px.scatter(
            df_clean,
            x='GAL_TOTAL',
            y='N_TRAB_TOTAL',
            title='Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores',
            labels={'GAL_TOTAL': 'Total de Galin√°ceos', 'N_TRAB_TOTAL': 'N√∫mero de Trabalhadores', 'SIST_CRIA': 'Sistema de Cria√ß√£o'}, # Adicionado label para SIST_CRIA
            trendline="ols",
            color='SIST_CRIA',
            hover_name="SIST_CRIA" # Adiciona o nome do sistema de cria√ß√£o ao passar o mouse
        )
        st.plotly_chart(fig3, use_container_width=True)

        # Exibe a correla√ß√£o calculada
        st.info(f"**Correla√ß√£o Calculada:** {corr:.2f}")

        # Se√ß√£o de interpreta√ß√£o expans√≠vel
        with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Rela√ß√£o entre Tamanho e Trabalhadores"):
            st.info("""
            **üë• An√°lise da Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores**

            üìå **Principais observa√ß√µes:**
            - A maioria dos estabelecimentos √© de **pequeno a m√©dio porte** (poucos galin√°ceos), empregando, em geral, **menos de 200 trabalhadores**.
            - H√° uma **alta dispers√£o** na quantidade de trabalhadores em estabelecimentos menores, indicando variabilidade nas opera√ß√µes.
            - A correla√ß√£o geral (que voc√™ ver√° no `st.info` acima) √© geralmente **muito fraca ou quase nula**, mas a an√°lise por sistema de cria√ß√£o (as cores dos pontos) revela tend√™ncias distintas.
            - Para **Produtores de Frangos de Corte** e **Outros Produtores**, a linha de tend√™ncia pode ser **levemente negativa/plana**, sugerindo que o aumento da escala pode ser acompanhado por maior automa√ß√£o e efici√™ncia de m√£o de obra.
            - Para **Produtores de Ovos para Consumo** e **Produtores de Ovos para Incubacao**, a rela√ß√£o tende a ser mais **est√°vel ou ligeiramente positiva**, indicando que a demanda por m√£o de obra √© menos reduzida com o aumento da escala por unidade produzida.

            üí° **Interpreta√ß√£o:**
            - A rela√ß√£o entre o tamanho do plantel e o n√∫mero de trabalhadores √© **complexa e n√£o linear**, sendo fortemente influenciada pelo **sistema de cria√ß√£o**.
            - Sistemas como **Produtores de Frangos de Corte** podem se beneficiar mais de **automa√ß√£o em larga escala**, enquanto a **produ√ß√£o de ovos** pode ter uma necessidade de m√£o de obra mais **constante** por unidade produzida.
            - As diferen√ßas observadas indicam que o setor av√≠cola possui **perfis operacionais diversos**, que dependem n√£o apenas do tamanho, mas tamb√©m da especializa√ß√£o do estabelecimento.
            """)
    else:
        st.warning("N√£o h√° dados v√°lidos (n√£o-nulos) nas colunas 'GAL_TOTAL', 'N_TRAB_TOTAL' ou 'SIST_CRIA' para exibir o gr√°fico ap√≥s o tratamento de valores ausentes. Verifique seus dados de origem e o mapeamento dos sistemas de cria√ß√£o.")
else:
    st.warning("As colunas 'GAL_TOTAL', 'N_TRAB_TOTAL' ou 'SIST_CRIA' n√£o foram encontradas no DataFrame principal ou o DataFrame est√° vazio. Verifique o nome das colunas no seu arquivo CSV e a acessibilidade do mesmo.")

import streamlit as st
import pandas as pd
import plotly.express as px

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise Av√≠cola - Sistemas de Cria√ß√£o",
    page_icon="üêî",
    layout="wide",
    initial_sidebar_state="expanded",
)

# T√≠tulo principal
st.title('An√°lise de Sistemas de Cria√ß√£o Av√≠cola')
st.markdown("Uma vis√£o aprofundada dos diferentes sistemas de cria√ß√£o de aves e seus impactos na produ√ß√£o.")
st.markdown("---")

# Carregamento do arquivo local
try:
    df = pd.read_csv("GALINACEOS.csv", sep=';')
    # Convertendo 'GAL_TOTAL' e 'GAL_VEND' para num√©rico, tratando erros e preenchendo NaNs
    df['GAL_TOTAL'] = pd.to_numeric(df['GAL_TOTAL'], errors='coerce').fillna(0)
    df['GAL_VEND'] = pd.to_numeric(df['GAL_VEND'], errors='coerce').fillna(0)
    df['Q_DZ_PROD'] = pd.to_numeric(df['Q_DZ_PROD'], errors='coerce').fillna(0)
    # Convertendo 'SIST_CRIA' para string e removendo espa√ßos
    df['SIST_CRIA'] = df['SIST_CRIA'].astype(str).str.strip()

    # =============================================
    # ‚ú® NOVIDADE: Mapeamento e Limpeza da coluna SIST_CRIA
    # =============================================
    if 'SIST_CRIA' in df.columns:
        # Dicion√°rio de mapeamento das abrevia√ß√µes para descri√ß√µes completas
        mapeamento_sistemas = {
            '1-SIST_POC': 'Produtores de Ovos para Consumo',
            '2-SIST_POI': 'Produtores de Ovos para Incuba√ß√£o',
            '3-SIST_PFC': 'Produtores de Frangos de Corte',
            '4-Outro': 'Outros Produtores'
        }
        
        # Aplicar o mapeamento
        df['SIST_CRIA'] = df['SIST_CRIA'].replace(mapeamento_sistemas)
        
    else:
        st.warning("A coluna 'SIST_CRIA' n√£o foi encontrada no dataset. Gr√°ficos dependentes dela podem n√£o funcionar corretamente.")

except Exception as e:
    st.error(f"Erro ao carregar o arquivo GALINACEOS.csv: {e}")
    st.stop()


# ---
## Gr√°fico de Densidade de Aves por Sistema de Cria√ß√£o
# ---
def gerar_grafico_densidade_aves_por_sistema(df):
    st.subheader("üìä Densidade de Aves por Sistema de Cria√ß√£o")
    st.markdown("Explore a distribui√ß√£o da densidade de aves por diferentes sistemas de cria√ß√£o, identificando padr√µes e concentra√ß√µes.")
    if 'SIST_CRIA' not in df.columns or 'GAL_TOTAL' not in df.columns:
        st.warning("O DataFrame n√£o cont√©m as colunas necess√°rias ('SIST_CRIA' ou 'GAL_TOTAL').")
        return
    
    df_plot = df[['SIST_CRIA', 'GAL_TOTAL']].dropna()
    if df_plot.empty:
        st.warning("N√£o h√° dados suficientes para gerar o gr√°fico de densidade.")
        return
    
    fig = px.density_heatmap(
        df_plot,
        x='GAL_TOTAL',
        y='SIST_CRIA', # Agora com os nomes completos
        title='Distribui√ß√£o da Densidade de Aves por Sistema de Cria√ß√£o',
        labels={'GAL_TOTAL': 'Total de Aves (Cabe√ßa)', 'SIST_CRIA': 'Sistema de Cria√ß√£o'},
        color_continuous_scale='Plasma',  # Escolha uma paleta de cores mais vibrante
        nbinsx=30, # Aumentar o n√∫mero de bins para mais detalhes
        height=500,
        template='plotly_white' # Adicionar um template para um visual mais limpo
    )
    fig.update_layout(
        title_font_size=20,
        xaxis_title_font_size=16,
        yaxis_title_font_size=16,
        coloraxis_colorbar=dict(title='Densidade') # Adicionar t√≠tulo √† barra de cores
    )
    st.plotly_chart(fig, use_container_width=True)
    
    with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Densidade"): # Adicionado st.expander
        st.info("""
        **üîç An√°lise da Distribui√ß√£o de Densidade de Aves por Sistema de Cria√ß√£o**
        üìå **Principais observa√ß√µes:**
        - O sistema **"Outros Produtores"** apresenta concentra√ß√£o de estabelecimentos com menor n√∫mero total de aves, predominantemente entre **6.000 e 7.000 cabe√ßas**.
        - **"Produtores de Ovos para Consumo"** e **"Produtores de Frangos de Corte"** mostram maior dispers√£o, com a maioria dos registros entre **9.000 e 12.000 aves** por estabelecimento.
        - **"Produtores de Ovos para Incuba√ß√£o"** destaca-se por concentrar-se nas faixas mais elevadas, **acima de 13.000 aves**.
        üí° **Interpreta√ß√£o:**
        - O gr√°fico evidencia diferentes perfis produtivos: sistemas voltados para incuba√ß√£o tendem a operar com plant√©is mais numerosos, enquanto sistemas classificados como "Outros" concentram-se em pequenas cria√ß√µes.
        - A varia√ß√£o na densidade sugere especializa√ß√£o e segmenta√ß√£o claras entre os sistemas de cria√ß√£o, refletindo demandas produtivas e estrat√©gias distintas.
        - As informa√ß√µes s√£o √∫teis para orientar pol√≠ticas de apoio e estrat√©gias de crescimento conforme o perfil predominante de cada sistema.
        """)

# ---
## Gr√°fico de Distribui√ß√£o da Produ√ß√£o por Sistema
# ---
def gerar_grafico_distribuicao_producao_por_sistema(df, tipo_producao='aves'):
    if tipo_producao == 'aves':
        coluna_producao = 'GAL_VEND'
        rotulo_eixo_y = 'Quantidade de Aves Vendidas (Cabe√ßa)'
        titulo_grafico = 'üìà Distribui√ß√£o da Venda de Aves por Sistema de Cria√ß√£o'
        hover_data = ['GAL_VEND']
    elif tipo_producao == 'ovos':
        coluna_producao = 'Q_DZ_PROD'
        rotulo_eixo_y = 'Quantidade de Ovos Produzidos (D√∫zia)'
        titulo_grafico = 'ü•ö Distribui√ß√£o da Produ√ß√£o de Ovos por Sistema de Cria√ß√£o'
        hover_data = ['Q_DZ_PROD']
    else:
        st.warning("Tipo de produ√ß√£o inv√°lido. Escolha 'aves' ou 'ovos'.")
        return
    
    st.subheader(titulo_grafico)
    st.markdown(f"Visualize como a {'venda de aves' if tipo_producao == 'aves' else 'produ√ß√£o de ovos'} se distribui entre os diferentes sistemas de cria√ß√£o.")
    
    if 'SIST_CRIA' not in df.columns or coluna_producao not in df.columns:
        st.warning(f"O DataFrame n√£o cont√©m as colunas necess√°rias ('SIST_CRIA' ou '{coluna_producao}').")
        return
    
    producao_por_sistema = df.groupby('SIST_CRIA')[coluna_producao].sum().reset_index()
    
    fig = px.bar(
        producao_por_sistema,
        x='SIST_CRIA', # Agora com os nomes completos
        y=coluna_producao,
        title=titulo_grafico,
        labels={'SIST_CRIA': 'Sistema de Cria√ß√£o', coluna_producao: rotulo_eixo_y},
        color=coluna_producao, # Usar a coluna de produ√ß√£o para colorir, criando um gradiente
        color_continuous_scale='Viridis', # Nova paleta de cores para barras
        text=coluna_producao,
        template='plotly_white',
        hover_data=hover_data # Adicionar hover_data para mais detalhes ao passar o mouse
    )
    fig.update_traces(
        texttemplate='%{text:,.0f}',
        textposition='outside',
        marker_line_color='rgb(8,48,107)', # Adicionar borda √†s barras
        marker_line_width=1.5
    )
    fig.update_layout(
        xaxis_tickangle=-45,
        title_font_size=20,
        xaxis_title_font_size=16,
        yaxis_title_font_size=16,
        uniformtext_minsize=8, # Minimizar tamanho do texto para evitar sobreposi√ß√£o
        uniformtext_mode='hide' # Esconder texto se n√£o couber
    )
    st.plotly_chart(fig, use_container_width=True)
    
    with st.expander(f"üí° Interpreta√ß√£o do Gr√°fico de {('Venda de Aves' if tipo_producao == 'aves' else 'Produ√ß√£o de Ovos')}"): # Adicionado st.expander
        st.info(f"""
        **üîç An√°lise da Distribui√ß√£o da {'Venda de Aves' if tipo_producao == 'aves' else 'Produ√ß√£o de Ovos'} por Sistema de Cria√ß√£o**
        üìå **Principais observa√ß√µes:**
        - O sistema **"Produtores de Frangos de Corte"** lidera as vendas, com maior volume comercializado.
        - Os sistemas **"Produtores de Ovos para Consumo"** e **"Produtores de Ovos para Incuba√ß√£o"** tamb√©m apresentam volumes elevados, evidenciando a import√¢ncia dos sistemas voltados √† produ√ß√£o de ovos tanto para consumo direto quanto para incuba√ß√£o.
        - O grupo **"Outros Produtores"** registra o menor volume de vendas, indicando baixa participa√ß√£o desse segmento no mercado.
        üí° **Interpreta√ß√£o:**
        - O destaque do sistema de frangos de corte refor√ßa o papel central da avicultura de corte na cadeia produtiva e comercial.
        - A significativa participa√ß√£o dos sistemas de ovos para consumo e incuba√ß√£o revela a diversifica√ß√£o da produ√ß√£o e a relev√¢ncia desses segmentos no abastecimento do mercado.
        - A baixa representatividade do grupo "Outros" pode indicar oportunidades para o desenvolvimento de nichos ou sistemas alternativos, caso haja demanda espec√≠fica.
        """)

# ---
## Histograma de Distribui√ß√£o de Aves por Sistema
# ---
def gerar_histograma_aves_por_sistema(df):
    st.subheader("üìä Histograma de Distribui√ß√£o de Aves por Sistema")
    st.markdown("Compreenda a frequ√™ncia de estabelecimentos por faixa de total de aves, segmentada por sistema de cria√ß√£o.")
    if 'SIST_CRIA' not in df.columns or 'GAL_TOTAL' not in df.columns:
        st.warning("O DataFrame n√£o cont√©m as colunas necess√°rias ('SIST_CRIA' ou 'GAL_TOTAL').")
        return
    
    df_plot = df[['SIST_CRIA', 'GAL_TOTAL']].dropna()
    if df_plot.empty:
        st.warning("N√£o h√° dados suficientes para gerar o histograma.")
        return
    
    fig = px.histogram(
        df_plot,
        x='GAL_TOTAL',
        color='SIST_CRIA', # Agora com os nomes completos
        title='Distribui√ß√£o de Aves por Sistema de Cria√ß√£o',
        labels={'GAL_TOTAL': 'Total de Aves (Cabe√ßa)', 'SIST_CRIA': 'Sistema de Cria√ß√£o'},
        color_discrete_sequence=px.colors.qualitative.Pastel, # Uma paleta de cores mais suave
        nbins=40, # Mais bins para uma distribui√ß√£o mais granular
        barmode='overlay', # Mudar para overlay para melhor visualiza√ß√£o das sobreposi√ß√µes
        opacity=0.7,
        template='plotly_white',
        hover_data=['GAL_TOTAL'] # Adicionar hover_data
    )
    fig.update_layout(
        title_font_size=20,
        xaxis_title_font_size=16,
        yaxis_title_font_size=16,
        legend_title_text='Sistema de Cria√ß√£o' # T√≠tulo para a legenda
    )
    st.plotly_chart(fig, use_container_width=True)
    
    with st.expander("üí° Interpreta√ß√£o do Histograma"): # Adicionado st.expander
        st.info("""
        **üîç An√°lise do Histograma de Distribui√ß√£o de Aves por Sistema**
        üìå **Principais observa√ß√µes:**
        - O histograma apresenta a distribui√ß√£o do total de aves por estabelecimento, segmentado pelos sistemas: **Produtores de Ovos para Consumo**, **Produtores de Frangos de Corte**, **Outros Produtores** e **Produtores de Ovos para Incuba√ß√£o**.
        - A maior concentra√ß√£o de registros ocorre nas faixas de **6.000 a 14.000 aves**, evidenciando uma ampla varia√ß√£o no porte dos estabelecimentos.
        - O sistema **"Produtores de Ovos para Incuba√ß√£o"** aparece tanto nas faixas mais baixas (cerca de 6.000 aves) quanto nas mais altas (acima de 13.000 aves), indicando diversidade de escalas dentro deste segmento.
        - Os sistemas **"Produtores de Ovos para Consumo"**, **"Produtores de Frangos de Corte"** e **"Outros Produtores"** est√£o presentes principalmente nas faixas intermedi√°rias e elevadas, sugerindo prefer√™ncia por plant√©is m√©dios a grandes nesses sistemas.
        üí° **Interpreta√ß√£o:**
        - O gr√°fico revela que a produ√ß√£o av√≠cola √© marcada por grande heterogeneidade no tamanho dos plant√©is, mesmo dentro de um mesmo sistema de cria√ß√£o.
        - A presen√ßa de sistemas de incuba√ß√£o em diferentes faixas pode indicar estrat√©gias produtivas distintas, enquanto os demais sistemas tendem a se concentrar em faixas m√©dias e altas de produ√ß√£o.
        - Essas informa√ß√µes s√£o relevantes para o planejamento do setor, permitindo identificar oportunidades de apoio e desenvolvimento conforme o perfil produtivo predominante em cada sistema.
        """)

# Se√ß√£o de gr√°ficos
col1, col2 = st.columns([3, 1])
with col1:
    gerar_grafico_densidade_aves_por_sistema(df)
with col2:
    st.markdown("Selecione o tipo de produ√ß√£o para visualizar as vendas:")
    tipo = st.radio(
        "Tipo de Produ√ß√£o:",
        ('aves', 'ovos'),
        format_func=lambda x: "Aves Vendidas" if x=="aves" else "Ovos Produzidos",
        key='tipo_producao'
    )

# Garantir que os gr√°ficos de produ√ß√£o e histograma sempre sejam exibidos
gerar_grafico_distribuicao_producao_por_sistema(df, tipo_producao=tipo)
gerar_histograma_aves_por_sistema(df)


# Rodap√©
st.markdown("---")
st.caption("""
üîé *An√°lise desenvolvida com base em dados de produ√ß√£o av√≠cola* üìÖ *Atualizado em Outubro 2023* """)

import streamlit as st
import pandas as pd
import plotly.express as px
import os

# ===============================================================================
# 0. Carregamento do DataFrame
# ===============================================================================
url_galinaceos_csv = "https://raw.githubusercontent.com/calazansiesb/CIADM1A/main/GALINACEOS.csv"

try:
    df = pd.read_csv(url_galinaceos_csv, sep=';')
    # st.success("Dados 'GALINACEOS.csv' carregados com sucesso!") # Comentar para n√£o poluir a interface
except Exception as e:
    st.error(f"Erro ao carregar o DataFrame 'GALINACEOS.csv' do GitHub: {e}")
    st.info("Por favor, verifique a URL, a acessibilidade do arquivo CSV e o formato (delimitador ';').")
    df = pd.DataFrame() # Define um df vazio para evitar erros posteriores

# ===============================================================================
# 1. Pr√©-processamento Comum do DataFrame (se√ß√µes anteriores)
# ===============================================================================

# Mapeamento e Limpeza da coluna SIST_CRIA (aplicado globalmente ao df)
if not df.empty and 'SIST_CRIA' in df.columns:
    df['SIST_CRIA'] = df['SIST_CRIA'].astype(str).str.strip()
    mapeamento_sistemas = {
        '1-SIST_POC': 'Produtores de Ovos para Consumo',
        '2-SIST_POI': 'Produtores de Ovos para Incubacao',
        '3-SIST_PFC': 'Produtores de Frangos de Corte',
        '4-Outro': 'Outros Produtores'
    }
    df['SIST_CRIA'] = df['SIST_CRIA'].replace(mapeamento_sistemas)
else:
    if not df.empty:
        st.warning("Coluna 'SIST_CRIA' n√£o encontrada para mapeamento.")


# =============================================
# 4. Rela√ß√£o: Tamanho √ó Trabalhadores
# =============================================
st.header('üë• Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores')

if not df.empty and 'GAL_TOTAL' in df.columns and 'N_TRAB_TOTAL' in df.columns and 'SIST_CRIA' in df.columns:
    df['GAL_TOTAL'] = pd.to_numeric(df['GAL_TOTAL'], errors='coerce')
    df['N_TRAB_TOTAL'] = pd.to_numeric(df['N_TRAB_TOTAL'], errors='coerce')

    df_clean_trab = df.dropna(subset=['GAL_TOTAL', 'N_TRAB_TOTAL', 'SIST_CRIA'])

    if not df_clean_trab.empty:
        corr = df_clean_trab['GAL_TOTAL'].corr(df_clean_trab['N_TRAB_TOTAL'])
        fig3 = px.scatter(
            df_clean_trab,
            x='GAL_TOTAL',
            y='N_TRAB_TOTAL',
            title='Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores',
            labels={'GAL_TOTAL': 'Total de Galin√°ceos', 'N_TRAB_TOTAL': 'N√∫mero de Trabalhadores', 'SIST_CRIA': 'Sistema de Cria√ß√£o'},
            trendline="ols",
            color='SIST_CRIA',
            hover_name="SIST_CRIA"
        )
        st.plotly_chart(fig3, use_container_width=True)
        st.info(f"**Correla√ß√£o Calculada:** {corr:.2f}")

        with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Rela√ß√£o entre Tamanho e Trabalhadores"):
            st.info("""
            **üë• An√°lise da Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores**

            üìå **Principais observa√ß√µes:**
            - A maioria dos estabelecimentos √© de **pequeno a m√©dio porte** (poucos galin√°ceos), empregando, em geral, **menos de 200 trabalhadores**.
            - H√° uma **alta dispers√£o** na quantidade de trabalhadores em estabelecimentos menores, indicando variabilidade nas opera√ß√µes.
            - A correla√ß√£o geral (que voc√™ ver√° no `st.info` acima) √© geralmente **muito fraca ou quase nula**, mas a an√°lise por sistema de cria√ß√£o (as cores dos pontos) revela tend√™ncias distintas.
            - Para **Produtores de Frangos de Corte** e **Outros Produtores**, a linha de tend√™ncia pode ser **levemente negativa/plana**, sugerindo que o aumento da escala pode ser acompanhado por maior automa√ß√£o e efici√™ncia de m√£o de obra.
            - Para **Produtores de Ovos para Consumo** e **Produtores de Ovos para Incubacao**, a rela√ß√£o tende a ser mais **est√°vel ou ligeiramente positiva**, indicando que a demanda por m√£o de obra √© menos reduzida com o aumento da escala por unidade produzida.

            üí° **Interpreta√ß√£o:**
            - A rela√ß√£o entre o tamanho do plantel e o n√∫mero de trabalhadores √© **complexa e n√£o linear**, sendo fortemente influenciada pelo **sistema de cria√ß√£o**.
            - Sistemas como **Produtores de Frangos de Corte** podem se beneficiar mais de **automa√ß√£o em larga escala**, enquanto a **produ√ß√£o de ovos** pode ter uma necessidade de m√£o de obra mais **constante** por unidade produzida.
            - As diferen√ßas observadas indicam que o setor av√≠cola possui **perfis operacionais diversos**, que dependem n√£o apenas do tamanho, mas tamb√©m da especializa√ß√£o do estabelecimento.
            """)
    else:
        st.warning("N√£o h√° dados v√°lidos (n√£o-nulos) nas colunas 'GAL_TOTAL', 'N_TRAB_TOTAL' ou 'SIST_CRIA' para exibir o gr√°fico ap√≥s o tratamento de valores ausentes na se√ß√£o de Trabalhadores. Verifique seus dados de origem.")
else:
    st.warning("As colunas 'GAL_TOTAL', 'N_TRAB_TOTAL' ou 'SIST_CRIA' n√£o foram encontradas no DataFrame principal ou o DataFrame est√° vazio para a se√ß√£o de Trabalhadores. Verifique o nome das colunas no seu arquivo CSV e a acessibilidade.")


# =============================================
# 5. Distribui√ß√£o por Porte dos Estabelecimentos
# =============================================
st.markdown("---") # Linha divis√≥ria
st.header('üè≠ Distribui√ß√£o por Porte dos Estabelecimentos')

# Adapta√ß√£o para usar df_clean ou df e tratar NaNs se houver
if not df.empty and 'NOM_CL_GAL' in df.columns:
    # O .value_counts() j√° ignora NaN por padr√£o, mas √© bom garantir a tipagem
    df['NOM_CL_GAL'] = df['NOM_CL_GAL'].astype(str).str.strip()
    
    # Se houver valores como 'nan' (string) ap√≥s o strip, podemos querer remov√™-los
    # ou trat√°-los de outra forma, dependendo do que NOM_CL_GAL possa ter.
    # Por enquanto, assumimos que s√£o strings v√°lidas ou nulos reais.
    
    # √â uma boa pr√°tica filtrar antes de fazer value_counts se houver NaNs que voc√™ n√£o quer contar
    freq_portes = df['NOM_CL_GAL'].value_counts().sort_index()

    # Filtra valores que podem ter se tornado "nan" (string) se houverem
    if 'nan' in freq_portes.index:
        freq_portes = freq_portes.drop('nan')

    if not freq_portes.empty: # Verifica se h√° dados para plotar
        fig4 = px.bar(
            x=freq_portes.index,
            y=freq_portes.values,
            title='Distribui√ß√£o de Estabelecimentos por Porte (Faixas IBGE)',
            labels={'x': 'Porte do Estabelecimento', 'y': 'Quantidade'},
            color_discrete_sequence=['#636EFA', '#EF553B', '#00CC96', '#AB63FA', '#FFA15A', '#FF6692'] # Adicionei mais uma cor se houver mais de 5 categorias
        )
        st.plotly_chart(fig4, use_container_width=True)

        with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Distribui√ß√£o por Porte dos Estabelecimentos"):
            st.info("""
            **üè≠ An√°lise da Distribui√ß√£o por Porte dos Estabelecimentos**

            O gr√°fico mostra a quantidade de estabelecimentos distribu√≠dos por diferentes faixas de porte (definidas pelo IBGE):

            - As faixas intermedi√°rias, especialmente entre **201 e 5.000 aves**, concentram os maiores n√∫meros de estabelecimentos, sugerindo predomin√¢ncia de produtores de m√©dio porte no setor.
            - Pequenos produtores ("De 1 a 100" e "De 101 a 200") tamb√©m s√£o numerosos, mas em menor quantidade que as faixas intermedi√°rias.
            - Faixas extremas ("De 100.001 e mais" e "Sem galin√°ceos em 30.09.2017") apresentam participa√ß√£o reduzida, indicando que grandes produtores e estabelecimentos temporariamente inativos s√£o minoria.
            - A categoria "Total" pode representar registros agregados ou casos n√£o classificados nas demais faixas, devendo ser analisada com cautela.
            - A presen√ßa de estabelecimentos "Sem galin√°ceos" refor√ßa a import√¢ncia de considerar sazonalidade ou inatividade tempor√°ria.

            **Conclus√£o:**
            - O perfil da produ√ß√£o av√≠cola brasileira √© fortemente marcado pela presen√ßa de estabelecimentos de porte intermedi√°rio, com pequena participa√ß√£o de grandes produtores e um contingente relevante de pequenos estabelecimentos. Isso tem implica√ß√µes para pol√≠ticas p√∫blicas, estrat√©gias de mercado e apoio ao setor.
            """)
    else:
        st.warning("N√£o h√° dados v√°lidos na coluna 'NOM_CL_GAL' para exibir o gr√°fico de Distribui√ß√£o por Porte ap√≥s a filtragem.")
else:
    st.warning("A coluna 'NOM_CL_GAL' n√£o foi encontrada no DataFrame principal ou o DataFrame est√° vazio para a se√ß√£o de Distribui√ß√£o por Porte.")

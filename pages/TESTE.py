import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Trabalho Final - Introdu√ß√£o √† Ci√™ncia de Dados CIADM1A-CIA001-20251",
    page_icon="üêî",
    layout="wide",
    initial_sidebar_state="expanded",
)

# T√≠tulo principal
st.title("Trabalho Final - Introdu√ß√£o √† Ci√™ncia de Dados CIADM1A-CIA001-20251")
st.subheader("Professor: Alexandre Vaz Roriz")
st.subheader("Alunos: Diego S√°, Ewerton Calazans")

st.title('An√°lise de Galin√°ceos no Brasil (IBGE 2017)')
st.markdown("---")

# =============================================
# üîπ 1. Carregar Dados Reais do GitHub
# =============================================
st.header("üìÇ Carregando Dados Reais")

csv_url = "https://raw.githubusercontent.com/calazansiesb/CIADM1A/main/GALINACEOS.csv"

try:
    df = pd.read_csv(csv_url, sep=';')
    st.success("Dados carregados com sucesso!")
except Exception as e:
    st.error(f"Erro ao carregar os dados: {e}")
    st.stop()

# =============================================
# ‚ú® NOVIDADE: Mapeamento e Limpeza da coluna SIST_CRIA
# =============================================
if 'SIST_CRIA' in df.columns:
    df['SIST_CRIA'] = df['SIST_CRIA'].astype(str).str.strip()
    mapeamento_sistemas = {
        '1-SIST_POC': 'Produtores de ovos para consumo',
        '2-SIST_POI': 'Produtores de ovos para incuba√ß√£o',
        '3-SIST_PFC': 'Produtores de frangos de corte',
        '4-Outro': 'Outros produtores'
    }
    df['SIST_CRIA'] = df['SIST_CRIA'].replace(mapeamento_sistemas)
    st.info("Colunas de 'SIST_CRIA' mapeadas para descri√ß√µes completas para melhor legibilidade.")

st.subheader("Visualiza√ß√£o dos Dados")
with st.expander("üîé Ver registros aleat√≥rios do conjunto de dados"):
    n = st.slider("Quantidade de linhas aleat√≥rias:", 1, min(20, len(df)), 5)
    st.dataframe(df.sample(n))

# =============================================
# üîπ 2. Propor√ß√£o dos Sistemas de Cria√ß√£o
# =============================================
st.header('üìä Propor√ß√£o dos Sistemas de Cria√ß√£o')

if 'SIST_CRIA' in df.columns:
    freq_sistemas = df['SIST_CRIA'].value_counts(normalize=True) * 100
    fig1 = px.pie(
        values=freq_sistemas.values,
        names=freq_sistemas.index,
        title='Distribui√ß√£o Percentual dos Sistemas de Cria√ß√£o',
        color_discrete_sequence=px.colors.qualitative.Pastel
    )
    st.plotly_chart(fig1, use_container_width=True)

    with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Propor√ß√£o dos Sistemas de Cria√ß√£o"):
        st.info("""
        **üìä An√°lise dos Sistemas de Cria√ß√£o**

        üìå **Principais observa√ß√µes:**
        - Os sistemas **Produtores de frangos de corte** (28,3%) e **Produtores de ovos para consumo** (28,1%) apresentam propor√ß√µes muito semelhantes, sendo os mais representativos do total.
        - A categoria **Outros produtores** (27,3%) tamb√©m possui participa√ß√£o relevante, indicando diversidade e presen√ßa de outros sistemas al√©m dos principais.
        - O sistema **Produtores de ovos para incuba√ß√£o** (16,4%) apresenta a menor fatia, mas ainda assim representa uma parcela consider√°vel.

        üí° **Interpreta√ß√£o:**
        - O equil√≠brio entre Produtores de frangos de corte e Produtores de ovos para consumo sugere concorr√™ncia ou complementaridade entre esses sistemas na cria√ß√£o.
        - A expressiva participa√ß√£o da categoria "Outros produtores" ressalta a exist√™ncia de m√∫ltiplos sistemas alternativos, possivelmente personalizados ou regionais.
        - A presen√ßa significativa dos Produtores de ovos para incuba√ß√£o, mesmo sendo a menor, pode indicar nichos produtivos ou oportunidades para expans√£o.
        """)
else:
    st.warning("A coluna 'SIST_CRIA' n√£o foi encontrada no dataset.")

# =============================================
# üîπ 3. Distribui√ß√£o por Unidade Federativa (usando seaborn)
# =============================================
st.header('üåé Distribui√ß√£o por Unidade Federativa')

if 'NOM_TERR' in df.columns:
    # Exemplo de agrupamento fict√≠cio por regi√£o - troque conforme sua base real!
    regioes_dict = {
        # Adapte conforme suas UFs e regi√µes!
        'Acre': 'Norte', 'Amap√°': 'Norte', 'Amazonas': 'Norte', 'Par√°': 'Norte', 'Rond√¥nia': 'Norte',
        'Roraima': 'Norte', 'Tocantins': 'Norte',
        'Alagoas': 'Nordeste', 'Bahia': 'Nordeste', 'Cear√°': 'Nordeste', 'Maranh√£o': 'Nordeste',
        'Para√≠ba': 'Nordeste', 'Pernambuco': 'Nordeste', 'Piau√≠': 'Nordeste', 'Rio Grande do Norte': 'Nordeste', 'Sergipe': 'Nordeste',
        'Distrito Federal': 'Centro-Oeste', 'Goi√°s': 'Centro-Oeste', 'Mato Grosso': 'Centro-Oeste', 'Mato Grosso do Sul': 'Centro-Oeste',
        'Esp√≠rito Santo': 'Sudeste', 'Minas Gerais': 'Sudeste', 'Rio de Janeiro': 'Sudeste', 'S√£o Paulo': 'Sudeste',
        'Paran√°': 'Sul', 'Rio Grande do Sul': 'Sul', 'Santa Catarina': 'Sul',
        'Brasil': 'Brasil', 'Sul': 'Brasil', 'Sudeste': 'Brasil', 'Nordeste': 'Brasil', 'Centro-Oeste': 'Brasil', 'Norte': 'Brasil',
        'Total': 'Brasil', 'Sem Galinaceos em 30.09.2017': 'Brasil'
    }
    df['Regi√£o'] = df['NOM_TERR'].map(regioes_dict).fillna('Outra')

    freq_estab_por_uf = df['NOM_TERR'].value_counts().sort_values(ascending=False)
    df_uf = (
        freq_estab_por_uf.rename_axis('Unidade Federativa')
        .reset_index(name='Quantidade')
    )
    df_uf['Regi√£o'] = df_uf['Unidade Federativa'].map(regioes_dict).fillna('Outra')

    # Gr√°fico Seaborn
    st.write("#### N√∫mero de Estabelecimentos por UF e Regi√£o")
    fig, ax = plt.subplots(figsize=(16, 7))
    sns.barplot(
        x='Unidade Federativa',
        y='Quantidade',
        data=df_uf,
        hue='Regi√£o',
        palette='Set2'
    )
    ax.set_xlabel('Unidade Federativa')
    ax.set_ylabel('Quantidade')
    ax.set_title('N√∫mero de Estabelecimentos por UF e Regi√£o')
    plt.xticks(rotation=35, ha='right')
    plt.legend(title="Regi√£o")
    plt.tight_layout()
    st.pyplot(fig)

    with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Distribui√ß√£o por Unidade Federativa"):
        st.info("""
        **üåé An√°lise da Distribui√ß√£o por Unidade Federativa**

        üìå **Principais observa√ß√µes:**
        - Os maiores valores de estabelecimentos est√£o concentrados nas regi√µes **Sul, Sudeste e Nordeste**, com estados como **Paran√°, Santa Catarina, Bahia, Pernambuco e Rio Grande do Sul** entre os primeiros colocados.
        - O n√∫mero de estabelecimentos por UF apresenta uma distribui√ß√£o relativamente homog√™nea nos estados l√≠deres, com leve decl√≠nio nos estados das regi√µes Norte e Centro-Oeste.
        - Estados como **Acre, Amap√°, Roraima e Amazonas** est√£o entre os que apresentam menor quantidade de estabelecimentos.

        üí° **Interpreta√ß√£o:**
        - A forte presen√ßa de estabelecimentos nas regi√µes Sul, Sudeste e Nordeste pode estar relacionada √† infraestrutura mais desenvolvida, tradi√ß√£o produtiva e maior demanda de mercado.
        - A menor concentra√ß√£o de estabelecimentos em estados do Norte e parte do Centro-Oeste pode indicar desafios log√≠sticos, menor densidade populacional ou potencial para expans√£o do setor.
        - A an√°lise sugere oportunidades de investimento e crescimento nas regi√µes menos representadas, promovendo maior equil√≠brio nacional na distribui√ß√£o de estabelecimentos.
        """)
else:
    st.warning("A coluna 'NOM_TERR' n√£o foi encontrada no dataset.")

# =============================================
# üîπ 4. Rela√ß√£o: Tamanho √ó Trabalhadores
# =============================================
st.header('üë• Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores')

if 'GAL_TOTAL' in df.columns and 'N_TRAB_TOTAL' in df.columns:
    df['GAL_TOTAL'] = pd.to_numeric(df['GAL_TOTAL'], errors='coerce')
    df['N_TRAB_TOTAL'] = pd.to_numeric(df['N_TRAB_TOTAL'], errors='coerce')
    corr = df['GAL_TOTAL'].corr(df['N_TRAB_TOTAL'])
    fig3 = px.scatter(
        df,
        x='GAL_TOTAL',
        y='N_TRAB_TOTAL',
        title='Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores',
        labels={'GAL_TOTAL': 'Total de Galin√°ceos', 'N_TRAB_TOTAL': 'N√∫mero de Trabalhadores'},
        trendline="ols",
        color='SIST_CRIA'
    )
    st.plotly_chart(fig3, use_container_width=True)
    st.info(f"**Correla√ß√£o Calculada:** {corr:.2f}")

    with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Rela√ß√£o entre Tamanho e Trabalhadores"):
        st.info("""
        **üë• An√°lise da Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores**

        üìå **Principais observa√ß√µes:**
        - A maioria dos estabelecimentos √© de **pequeno a m√©dio porte** (poucos galin√°ceos), empregando, em geral, **menos de 200 trabalhadores**.
        - H√° uma **alta dispers√£o** na quantidade de trabalhadores em estabelecimentos menores, indicando variabilidade nas opera√ß√µes.
        - A correla√ß√£o geral (-0.08) √© muito fraca, mas a an√°lise por sistema de cria√ß√£o revela tend√™ncias distintas.
        - Para **Produtores de frangos de corte** e **Outros produtores**, a linha de tend√™ncia √© **levemente negativa/plana**, sugerindo que o aumento da escala pode ser acompanhado por maior automa√ß√£o e efici√™ncia de m√£o de obra.
        - Para **Produtores de ovos para consumo** e **incuba√ß√£o**, a rela√ß√£o tende a ser mais **est√°vel ou ligeiramente positiva**, indicando que a demanda por m√£o de obra √© menos reduzida com o aumento da escala.

        üí° **Interpreta√ß√£o:**
        - A rela√ß√£o entre o tamanho do plantel e o n√∫mero de trabalhadores √© **complexa e n√£o linear**, sendo fortemente influenciada pelo **sistema de cria√ß√£o**.
        - Sistemas como **frangos de corte** podem se beneficiar mais de **automa√ß√£o em larga escala**, enquanto a **produ√ß√£o de ovos** pode ter uma necessidade de m√£o de obra mais **constante** por unidade produzida.
        - As diferen√ßas observadas indicam que o setor av√≠cola possui **perfis operacionais diversos**, que dependem n√£o apenas do tamanho, mas tamb√©m da especializa√ß√£o do estabelecimento.
        """)
else:
    st.warning("As colunas 'GAL_TOTAL' ou 'N_TRAB_TOTAL' n√£o foram encontradas no dataset.")

# =============================================
# üîπ 5. Distribui√ß√£o por Porte dos Estabelecimentos
# =============================================
st.header('üè≠ Distribui√ß√£o por Porte dos Estabelecimentos')

if 'Q_DZ_PROD' in df.columns:
    df['Q_DZ_PROD'] = pd.to_numeric(df['Q_DZ_PROD'], errors='coerce')
    df.dropna(subset=['Q_DZ_PROD'], inplace=True)

    max_val = df['Q_DZ_PROD'].max()
    if max_val > 0:
        bins = [-float('inf'), 1000, 5000, max_val + 1]
    else:
        bins = [-float('inf'), 1, 1000, float('inf')] 
    
    labels = ['Pequeno', 'M√©dio', 'Grande']

    df['Porte'] = pd.cut(
        df['Q_DZ_PROD'],
        bins=bins,
        labels=labels,
        include_lowest=True,
        right=False
    )

    freq_portes = df['Porte'].value_counts().reindex(labels, fill_value=0)

    fig4 = px.bar(
        x=freq_portes.index,
        y=freq_portes.values,
        title='Distribui√ß√£o de Estabelecimentos por Porte',
        labels={'x': 'Porte do Estabelecimento', 'y': 'Quantidade'},
        color_discrete_sequence=['#636EFA', '#EF553B', '#00CC96']
    )
    st.plotly_chart(fig4, use_container_width=True)

    with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Distribui√ß√£o por Porte dos Estabelecimentos"):
        st.info("""
        **üè≠ An√°lise da Distribui√ß√£o por Porte dos Estabelecimentos**

        üìå **Principais observa√ß√µes:**
        - A maioria dos estabelecimentos se enquadra no porte **"Pequeno"** (produ√ß√£o de at√© 1.000 d√∫zias de ovos), indicando uma base ampla de pequenos produtores.
        - O n√∫mero de estabelecimentos de porte **"M√©dio"** (entre 1.000 e 5.000 d√∫zias) √© significativamente menor que o dos pequenos.
        - Estabelecimentos de porte **"Grande"** (acima de 5.000 d√∫zias) s√£o os menos numerosos, mas representam as maiores produ√ß√µes individuais.

        üí° **Interpreta√ß√£o:**
        - A predomin√¢ncia de pequenos estabelecimentos pode refletir a estrutura da avicultura familiar ou de subsist√™ncia no Brasil.
        - A menor quantidade de estabelecimentos de m√©dio e grande porte sugere uma concentra√ß√£o da produ√ß√£o em poucas unidades de maior escala.
        - Essa distribui√ß√£o indica a necessidade de pol√≠ticas diferenciadas para apoiar os diversos portes de produtores, visando tanto o fortalecimento da base quanto o incentivo √† expans√£o e moderniza√ß√£o do setor.
        """)
else:
    st.warning("A coluna 'Q_DZ_PROD' n√£o foi encontrada no dataset.")

# =============================================
# üîπ Rodap√©
# =============================================
st.markdown("---")
st.caption("""
üîé *An√°lise desenvolvida com base nos dados reais do IBGE 2017*
üìÖ *Atualizado em Maio 2025*
""")

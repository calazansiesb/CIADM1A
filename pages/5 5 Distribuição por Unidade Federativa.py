import streamlit as st
import pandas as pd
import plotly.express as px

# Substitua pela URL RAW correta do seu arquivo CSV no GitHub
GITHUB_CSV_URL = 'https://raw.githubusercontent.com/calazansiesb/CIADM1A/main/GALINACEOS.csv'

@st.cache_data # Usar st.cache_data para cache de dados
def load_data(url):
    try:
        # Adicionei sep=';' e encoding='latin1' pois 칠 comum em CSVs brasileiros
        # Adicionei thousands='.' para tratar o ponto como separador de milhares na leitura de n칰meros
        df = pd.read_csv(url, sep=';', encoding='latin1', thousands='.')
        return df
    except FileNotFoundError:
        st.error("Erro: O arquivo n칚o foi encontrado na URL especificada. Verifique se a URL est치 correta e o arquivo existe.")
        return pd.DataFrame()
    except pd.errors.EmptyDataError:
        st.error("Erro: O arquivo est치 vazio. N칚o h치 dados para processar.")
        return pd.DataFrame()
    except pd.errors.ParserError as e:
        st.error(f"Erro: O arquivo CSV n칚o p칪de ser analisado. Verifique o delimitador (sep=';'), a codifica칞칚o (encoding='latin1') ou os separadores de n칰meros (thousands='.'). Detalhes: {e}")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"Erro ao carregar dados do GitHub. Verifique a URL ou o formato do arquivo. Detalhes: {e}")
        return pd.DataFrame()

# Carregamento dos dados
df = load_data(GITHUB_CSV_URL)

if df.empty:
    st.warning("N칚o foi poss칤vel carregar os dados. Verifique a URL e o conte칰do do arquivo CSV.")
    st.stop() # Interrompe a execu칞칚o se os dados n칚o puderem ser carregados

# Verifique as colunas do seu DataFrame.
# Se a coluna com os nomes das unidades federativas tiver outro nome, altere 'NOM_TERR' para o nome correto.
# Certifique-se de que 'E_CRIA_GAL' tamb칠m esteja presente.
if 'NOM_TERR' not in df.columns:
    st.error("A coluna 'NOM_TERR' n칚o foi encontrada no DataFrame. Por favor, verifique o nome da coluna no seu CSV.")
    st.stop()
if 'E_CRIA_GAL' not in df.columns:
    st.error("A coluna 'E_CRIA_GAL' n칚o foi encontrada no DataFrame. Por favor, verifique o nome da coluna no seu CSV.")
    st.stop()

# Garantir que E_CRIA_GAL 칠 num칠rica
# Se 'thousands='.' n칚o funcionar perfeitamente, podemos fazer uma convers칚o manual aqui:
# df['E_CRIA_GAL'] = pd.to_numeric(df['E_CRIA_GAL'].astype(str).str.replace('.', '', regex=False), errors='coerce').fillna(0)


st.header('游깵 Distribui칞칚o por Unidade Federativa')

# Lista oficial dos 26 estados + DF
estados_brasil = [
    'Acre', 'Alagoas', 'Amap치', 'Amazonas', 'Bahia', 'Cear치', 'Distrito Federal', 'Esp칤rito Santo', 'Goi치s',
    'Maranh칚o', 'Mato Grosso', 'Mato Grosso do Sul', 'Minas Gerais', 'Par치', 'Para칤ba', 'Paran치', 'Pernambuco',
    'Piau칤', 'Rio de Janeiro', 'Rio Grande do Norte', 'Rio Grande do Sul', 'Rond칪nia', 'Roraima', 'Santa Catarina',
    'S칚o Paulo', 'Sergipe', 'Tocantins'
]

# Mapeamento de estados para regi칫es
regioes_estados = {
    'Norte': ['Acre', 'Amap치', 'Amazonas', 'Par치', 'Rond칪nia', 'Roraima', 'Tocantins'],
    'Nordeste': ['Alagoas', 'Bahia', 'Cear치', 'Maranh칚o', 'Para칤ba', 'Pernambuco', 'Piau칤', 'Rio Grande do Norte', 'Sergipe'],
    'Centro-Oeste': ['Distrito Federal', 'Goi치s', 'Mato Grosso', 'Mato Grosso do Sul'],
    'Sudeste': ['Esp칤rito Santo', 'Minas Gerais', 'Rio de Janeiro', 'S칚o Paulo'],
    'Sul': ['Paran치', 'Rio Grande do Sul', 'Santa Catarina']
}

# Inverter o dicion치rio para mapear estado -> regi칚o
estado_para_regiao = {estado: regiao for regiao, estados in regioes_estados.items() for estado in estados}

# Adicionar 'Regiao' ao DataFrame principal para uso posterior, se necess치rio
# Certifique-se que df['NOM_TERR'] est치 limpo e corresponde aos nomes de estado
df['Regiao'] = df['NOM_TERR'].map(estado_para_regiao)

# Filtrar apenas estados do Brasil
df_uf = df[df['NOM_TERR'].isin(estados_brasil)].copy() # Use .copy() para evitar SettingWithCopyWarning

# Calcular a SOMA de E_CRIA_GAL por UF (para o Brasil inteiro)
freq_estab_por_uf_total = df_uf.groupby('NOM_TERR')['E_CRIA_GAL'].sum().sort_values(ascending=False)
df_plot_total = freq_estab_por_uf_total.rename_axis('Unidade Federativa').reset_index(name='Quantidade de Galin치ceos')

# === Seletor de Regi칚o para o Gr치fico Din칙mico ===
st.subheader('Selecione a Regi칚o para Exibir no Gr치fico:')
regioes_disponiveis = ['Todas as Regi칫es'] + list(regioes_estados.keys())
selected_region = st.selectbox('Escolha uma regi칚o', regioes_disponiveis)

# Filtragem e c치lculo da frequ칡ncia com base na sele칞칚o
df_filtered_by_region = df_uf.copy() # Come칞a com todos os estados do Brasil

title_sufix = ''
if selected_region != 'Todas as Regi칫es':
    estados_da_regiao = regioes_estados[selected_region]
    df_filtered_by_region = df_filtered_by_region[df_filtered_by_region['NOM_TERR'].isin(estados_da_regiao)]
    title_sufix = f' na Regi칚o {selected_region}'

# Calcular a SOMA de E_CRIA_GAL APENAS para os estados filtrados
if not df_filtered_by_region.empty:
    freq_estab_por_uf_filtered = df_filtered_by_region.groupby('NOM_TERR')['E_CRIA_GAL'].sum().sort_values(ascending=False)
    df_plot_filtered = freq_estab_por_uf_filtered.rename_axis('Unidade Federativa').reset_index(name='Quantidade de Galin치ceos')
else:
    df_plot_filtered = pd.DataFrame(columns=['Unidade Federativa', 'Quantidade de Galin치ceos']) # DataFrame vazio se n칚o houver dados


# === Gr치fico Din칙mico de Distribui칞칚o por UF ===
st.subheader(f'Quantidade de Galin치ceos por Estado{title_sufix}')
if not df_plot_filtered.empty:
    fig2 = px.bar(
        df_plot_filtered,
        x='Unidade Federativa',
        y='Quantidade de Galin치ceos', # Alterado para 'Quantidade de Galin치ceos'
        title=f'Quantidade de Galin치ceos por Unidade Federativa{title_sufix}', # T칤tulo alterado
        labels={'Unidade Federativa': 'Estado', 'Quantidade de Galin치ceos': 'Quantidade de Galin치ceos'}, # R칩tulos alterados
        color='Unidade Federativa',  # Cor 칰nica para cada estado!
        color_discrete_sequence=px.colors.qualitative.Set2  # Paleta amig치vel
    )
    fig2.update_layout(
        xaxis_tickangle=-35,
        showlegend=False,
        bargap=0.15,
        plot_bgcolor='white',
        font=dict(size=14)
    )
    # Adicionar o valor exato no topo de cada barra
    fig2.update_traces(texttemplate='%{y:.2s}', textposition='outside') # Formato para grandes n칰meros
    st.plotly_chart(fig2, use_container_width=True)
else:
    st.info(f"N칚o h치 dados para a regi칚o '{selected_region}' com os estados filtrados.")

st.markdown('---')

# Restante do c칩digo para os gr치ficos dos 3 maiores, 3 do meio e 3 menores (com altera칞칫es de r칩tulos)
st.header('An치lise Detalhada da Quantidade de Galin치ceos por Estado (Brasil)') # T칤tulo alterado

# Garantir que temos dados suficientes para essas an치lises
if len(df_plot_total) >= 3:
    # Top 3 Maiores
    top_3 = df_plot_total.head(3)
    fig_top_3 = px.bar(
        top_3,
        x='Unidade Federativa',
        y='Quantidade de Galin치ceos', # Alterado para 'Quantidade de Galin치ceos'
        title='Top 3 Maiores Estados em Quantidade de Galin치ceos', # T칤tulo alterado
        labels={'Unidade Federativa': 'Estado', 'Quantidade de Galin치ceos': 'Quantidade de Galin치ceos'}, # R칩tulos alterados
        color='Unidade Federativa',
        color_discrete_sequence=px.colors.qualitative.Plotly
    )
    fig_top_3.update_layout(xaxis_tickangle=-35, showlegend=False, plot_bgcolor='white', font=dict(size=14))
    fig_top_3.update_traces(texttemplate='%{y:.2s}', textposition='outside') # Adiciona o valor
    st.plotly_chart(fig_top_3, use_container_width=True)

    # 3 do Meio
    if len(df_plot_total) >= 6: # Precisamos de pelo menos 6 estados para ter 3 do meio razoavelmente definidos
        middle_start = len(df_plot_total) // 2 - 1 # Ajuste para pegar 3 do meio
        if middle_start < 0: middle_start = 0 # Garante que n칚o seja negativo
        middle_3 = df_plot_total.iloc[middle_start : middle_start + 3]

        fig_middle_3 = px.bar(
            middle_3,
            x='Unidade Federativa',
            y='Quantidade de Galin치ceos', # Alterado para 'Quantidade de Galin치ceos'
            title='3 Estados do Meio em Quantidade de Galin치ceos', # T칤tulo alterado
            labels={'Unidade Federativa': 'Estado', 'Quantidade de Galin치ceos': 'Quantidade de Galin치ceos'}, # R칩tulos alterados
            color='Unidade Federativa',
            color_discrete_sequence=px.colors.qualitative.D3
        )
        fig_middle_3.update_layout(xaxis_tickangle=-35, showlegend=False, plot_bgcolor='white', font=dict(size=14))
        fig_middle_3.update_traces(texttemplate='%{y:.2s}', textposition='outside') # Adiciona o valor
        st.plotly_chart(fig_middle_3, use_container_width=True)
    else:
        st.info("N칚o h치 estados suficientes para exibir os '3 do meio'. S칚o necess치rios pelo menos 6 estados.")


    # 3 Menores
    bottom_3 = df_plot_total.tail(3)
    fig_bottom_3 = px.bar(
        bottom_3,
        x='Unidade Federativa',
        y='Quantidade de Galin치ceos', # Alterado para 'Quantidade de Galin치ceos'
        title='Top 3 Menores Estados em Quantidade de Galin치ceos', # T칤tulo alterado
        labels={'Unidade Federativa': 'Estado', 'Quantidade de Galin치ceos': 'Quantidade de Galin치ceos'}, # R칩tulos alterados
        color='Unidade Federativa',
        color_discrete_sequence=px.colors.qualitative.G10
    )
    fig_bottom_3.update_layout(xaxis_tickangle=-35, showlegend=False, plot_bgcolor='white', font=dict(size=14))
    fig_bottom_3.update_traces(texttemplate='%{y:.2s}', textposition='outside') # Adiciona o valor
    st.plotly_chart(fig_bottom_3, use_container_width=True)

else:
    st.warning("N칚o h치 dados suficientes para gerar os gr치ficos dos 3 maiores, 3 do meio e 3 menores estados.")

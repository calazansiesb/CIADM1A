import streamlit as st
import pandas as pd
import plotly.express as px

# Simula칞칚o do DataFrame 'df' (substitua pelo seu carregamento de dados real)
# Certifique-se de que seu DataFrame real tenha uma coluna 'NOM_TERR'
data = {
    'NOM_TERR': [
        'S칚o Paulo', 'Rio de Janeiro', 'Minas Gerais', 'Bahia', 'Paran치',
        'Rio Grande do Sul', 'Santa Catarina', 'Pernambuco', 'Cear치', 'Goi치s',
        'Distrito Federal', 'Amazonas', 'Par치', 'Maranh칚o', 'Esp칤rito Santo',
        'Mato Grosso', 'Mato Grosso do Sul', 'Rond칪nia', 'Tocantins', 'Acre',
        'Amap치', 'Roraima', 'Para칤ba', 'Alagoas', 'Sergipe',
        'Rio Grande do Norte', 'Piau칤', 'S칚o Paulo', 'Minas Gerais', 'Bahia'
    ]
}
df = pd.DataFrame(data)

st.header('游깵 Distribui칞칚o por Unidade Federativa')

if 'NOM_TERR' in df.columns:
    # Lista oficial dos 26 estados + DF
    estados_brasil = [
        'Acre', 'Alagoas', 'Amap치', 'Amazonas', 'Bahia', 'Cear치', 'Distrito Federal', 'Esp칤rito Santo', 'Goi치s',
        'Maranh칚o', 'Mato Grosso', 'Mato Grosso do Sul', 'Minas Gerais', 'Par치', 'Para칤ba', 'Paran치', 'Pernambuco',
        'Piau칤', 'Rio de Janeiro', 'Rio Grande do Norte', 'Rio Grande do Sul', 'Rond칪nia', 'Roraima', 'Santa Catarina',
        'S칚o Paulo', 'Sergipe', 'Tocantins'
    ]

    # Mapeamento de estados para regi칫es
    regioes_estados = {
        'Norte': ['Acre', 'Amap치', 'Amazonas', 'Par치', 'Rond칪nia', 'Roraima', 'Tocantins'],
        'Nordeste': ['Alagoas', 'Bahia', 'Cear치', 'Maranh칚o', 'Para칤ba', 'Pernambuco', 'Piau칤', 'Rio Grande do Norte', 'Sergipe'],
        'Centro-Oeste': ['Distrito Federal', 'Goi치s', 'Mato Grosso', 'Mato Grosso do Sul'],
        'Sudeste': ['Esp칤rito Santo', 'Minas Gerais', 'Rio de Janeiro', 'S칚o Paulo'],
        'Sul': ['Paran치', 'Rio Grande do Sul', 'Santa Catarina']
    }

    # Inverter o dicion치rio para mapear estado -> regi칚o
    estado_para_regiao = {estado: regiao for regiao, estados in regioes_estados.items() for estado in estados}

    # Adicionar 'Regi칚o' ao DataFrame principal para uso posterior, se necess치rio
    df['Regiao'] = df['NOM_TERR'].map(estado_para_regiao)

    # Filtrar apenas estados
    df_uf = df[df['NOM_TERR'].isin(estados_brasil)].copy() # Use .copy() para evitar SettingWithCopyWarning

    # Calcular a frequ칡ncia de estabelecimentos por UF (para o Brasil inteiro)
    freq_estab_por_uf_total = df_uf['NOM_TERR'].value_counts().sort_values(ascending=False)
    df_plot_total = freq_estab_por_uf_total.rename_axis('Unidade Federativa').reset_index(name='Quantidade')


    # === Seletor de Regi칚o para o Gr치fico Din칙mico ===
    st.subheader('Selecione a Regi칚o para Exibir no Gr치fico:')
    regioes_disponiveis = ['Todas as Regi칫es'] + list(regioes_estados.keys())
    selected_region = st.selectbox('Escolha uma regi칚o', regioes_disponiveis)

    df_plot_filtered = df_plot_total.copy() # Come칞a com o DataFrame total

    if selected_region != 'Todas as Regi칫es':
        estados_da_regiao = regioes_estados[selected_region]
        df_plot_filtered = df_plot_filtered[df_plot_filtered['Unidade Federativa'].isin(estados_da_regiao)]
        title_sufix = f' na Regi칚o {selected_region}'
    else:
        title_sufix = ''

    # === Gr치fico Din칙mico de Distribui칞칚o por UF ===
    st.subheader(f'N칰mero de Estabelecimentos por Estado{title_sufix}')
    if not df_plot_filtered.empty:
        fig2 = px.bar(
            df_plot_filtered,
            x='Unidade Federativa',
            y='Quantidade',
            title=f'Distribui칞칚o por Unidade Federativa{title_sufix}',
            labels={'Unidade Federativa': 'Estado', 'Quantidade': 'Quantidade'},
            color='Unidade Federativa',  # Cor 칰nica para cada estado!
            color_discrete_sequence=px.colors.qualitative.Set2  # Paleta amig치vel
        )
        fig2.update_layout(
            xaxis_tickangle=-35,
            showlegend=False,
            bargap=0.15,
            plot_bgcolor='white',
            font=dict(size=14)
        )
        st.plotly_chart(fig2, use_container_width=True)
    else:
        st.info(f"N칚o h치 dados para a regi칚o '{selected_region}' com os estados filtrados.")

    st.markdown('---')

    # === Gr치ficos dos 3 Maiores, 3 do Meio e 3 Menores Estados ===
    st.header('An치lise Detalhada dos Estabelecimentos por Estado (Brasil)')

    # Garantir que temos dados suficientes para essas an치lises
    if len(df_plot_total) >= 3:
        # Top 3 Maiores
        top_3 = df_plot_total.head(3)
        fig_top_3 = px.bar(
            top_3,
            x='Unidade Federativa',
            y='Quantidade',
            title='Top 3 Maiores Estados em N칰mero de Estabelecimentos',
            labels={'Unidade Federativa': 'Estado', 'Quantidade': 'Quantidade'},
            color='Unidade Federativa',
            color_discrete_sequence=px.colors.qualitative.Plotly
        )
        fig_top_3.update_layout(xaxis_tickangle=-35, showlegend=False, plot_bgcolor='white', font=dict(size=14))
        st.plotly_chart(fig_top_3, use_container_width=True)

        # 3 do Meio
        if len(df_plot_total) >= 6: # Precisamos de pelo menos 6 estados para ter 3 do meio razoavelmente definidos
            middle_start = len(df_plot_total) // 2 - 1 # Ajuste para pegar 3 do meio
            if middle_start < 0: middle_start = 0 # Garante que n칚o seja negativo
            middle_3 = df_plot_total.iloc[middle_start : middle_start + 3]

            fig_middle_3 = px.bar(
                middle_3,
                x='Unidade Federativa',
                y='Quantidade',
                title='3 Estados do Meio em N칰mero de Estabelecimentos',
                labels={'Unidade Federativa': 'Estado', 'Quantidade': 'Quantidade'},
                color='Unidade Federativa',
                color_discrete_sequence=px.colors.qualitative.D3
            )
            fig_middle_3.update_layout(xaxis_tickangle=-35, showlegend=False, plot_bgcolor='white', font=dict(size=14))
            st.plotly_chart(fig_middle_3, use_container_width=True)
        else:
            st.info("N칚o h치 estados suficientes para exibir os '3 do meio'. S칚o necess치rios pelo menos 6 estados.")


        # 3 Menores
        bottom_3 = df_plot_total.tail(3)
        fig_bottom_3 = px.bar(
            bottom_3,
            x='Unidade Federativa',
            y='Quantidade',
            title='Top 3 Menores Estados em N칰mero de Estabelecimentos',
            labels={'Unidade Federativa': 'Estado', 'Quantidade': 'Quantidade'},
            color='Unidade Federativa',
            color_discrete_sequence=px.colors.qualitative.G10
        )
        fig_bottom_3.update_layout(xaxis_tickangle=-35, showlegend=False, plot_bgcolor='white', font=dict(size=14))
        st.plotly_chart(fig_bottom_3, use_container_width=True)

    else:
        st.warning("N칚o h치 dados suficientes para gerar os gr치ficos dos 3 maiores, 3 do meio e 3 menores estados.")

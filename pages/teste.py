import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise Av√≠cola Brasileira - IBGE 2017",
    page_icon="üêî",
    layout="wide",
    initial_sidebar_state="expanded",
)

# T√≠tulo principal
st.title('An√°lise de Galin√°ceos no Brasil (IBGE 2017)')
st.markdown("---")

# =============================================
# 1. PROPOR√á√ÉO DOS SISTEMAS DE CRIA√á√ÉO
# =============================================
st.header('üìä Propor√ß√£o dos Sistemas de Cria√ß√£o')

# Dados simulados (substituir por dados reais se necess√°rio)
sistemas = ['3-SIST_PFC', '1-SIST_POC', '2-SIST_POI', '4-Outro']
proporcoes = [28.3, 28.1, 27.3, 16.4]

# Sidebar para sele√ß√£o de dados
st.sidebar.header("Configura√ß√µes da An√°lise")
show_raw_data = st.sidebar.checkbox("Mostrar dados brutos", False)

if show_raw_data:
    st.subheader("Dados Brutos")
    df_sistemas = pd.DataFrame({
        'Sistema': sistemas,
        'Propor√ß√£o (%)': proporcoes
    })
    st.dataframe(df_sistemas)

fig1 = px.pie(
    values=proporcoes,
    names=sistemas,
    title='Distribui√ß√£o Percentual dos Sistemas de Cria√ß√£o',
    color_discrete_sequence=px.colors.qualitative.Pastel
)

st.plotly_chart(fig1, use_container_width=True)

# An√°lise expand√≠vel
with st.expander("üîç An√°lise dos Sistemas de Cria√ß√£o"):
    st.markdown("""
    **üìå Distribui√ß√£o:**
    - Sistema Predominante: **Produtores de frangos de corte (3-SIST_PFC)** - 28.3%
    - Segunda Coloca√ß√£o: **Produtores de ovos para consumo (1-SIST_POC)** - 28.1%
    - Terceira Posi√ß√£o: **Produtores de ovos para incuba√ß√£o (2-SIST_POI)** - 27.3%
    - Menor Representatividade: **Outros produtores (4-Outro)** - 16.4%

    **üí° Insights:**
    1. Equil√≠brio not√°vel entre os tr√™s principais sistemas produtivos (diferen√ßa <1%)
    2. Sistemas alternativos ("Outros produtores") apresentam menor participa√ß√£o (16.4%)
    3. Nenhum sistema domina claramente (>50% do total), indicando:
       - Diversifica√ß√£o da produ√ß√£o av√≠cola nacional
       - Pluralidade de modelos de cria√ß√£o
       - Oportunidades para nichos espec√≠ficos
    """)

# =============================================
# 2. DISTRIBUI√á√ÉO POR UNIDADE FEDERATIVA
# =============================================
st.header('üåé Distribui√ß√£o por Unidade Federativa')

# Dados simulados por UF (substituir por dados reais)
ufs = ['SP', 'MG', 'PR', 'RS', 'SC', 'BA', 'GO', 'MT']
valores = [120, 95, 80, 75, 60, 55, 50, 45]

# Widget de sele√ß√£o de visualiza√ß√£o
vis_type = st.sidebar.radio(
    "Tipo de visualiza√ß√£o para UFs:",
    ("Barras", "Pizza", "Treemap")
)

if vis_type == "Barras":
    fig2 = px.bar(
        x=ufs,
        y=valores,
        title='Estabelecimentos Av√≠colas por UF',
        labels={'x': 'Unidade Federativa', 'y': 'N√∫mero de Estabelecimentos'},
        color=ufs,
        color_discrete_sequence=px.colors.qualitative.Vivid
    )
elif vis_type == "Pizza":
    fig2 = px.pie(
        values=valores,
        names=ufs,
        title='Distribui√ß√£o Percentual por UF'
    )
else:
    fig2 = px.treemap(
        names=ufs,
        parents=['']*len(ufs),
        values=valores,
        title='Distribui√ß√£o Hier√°rquica por UF'
    )

st.plotly_chart(fig2, use_container_width=True)

# An√°lise expand√≠vel
with st.expander("üîé An√°lise Regional"):
    st.markdown("""
    **üìå Principais Observa√ß√µes:**
    - **Sudeste (SP/MG)** lidera em n√∫mero de estabelecimentos
    - **Sul (PR/RS/SC)** apresenta alta concentra√ß√£o produtiva
    - **Centro-Oeste (GO/MT)** mostra crescimento significativo

    **üí° Interpreta√ß√£o:**
    - Distribui√ß√£o reflete fatores hist√≥ricos e log√≠sticos
    - Concentra√ß√£o segue padr√µes de desenvolvimento regional
    - Dados justificam pol√≠ticas diferenciadas por regi√£o
    """)

# =============================================
# 3. RELA√á√ÉO TAMANHO √ó TRABALHADORES
# =============================================
st.header('üë• Rela√ß√£o: Tamanho √ó N√∫mero de Trabalhadores')

# Gerar dados simulados
np.random.seed(42)
tamanho = np.random.randint(1000, 50000, 100)
trabalhadores = tamanho/1000 * np.random.uniform(5, 15, 100)

# Widget para selecionar tipo de gr√°fico
scatter_type = st.sidebar.selectbox(
    "Tipo de visualiza√ß√£o para correla√ß√£o:",
    ("Scatter Plot", "Linha", "√Årea")
)

if scatter_type == "Scatter Plot":
    fig3 = px.scatter(
        x=tamanho,
        y=trabalhadores,
        title='Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores',
        labels={'x': 'Total de Galin√°ceos', 'y': 'N√∫mero de Trabalhadores'},
        trendline="lowess"
    )
elif scatter_type == "Linha":
    fig3 = px.line(
        x=tamanho,
        y=trabalhadores,
        title='Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores',
        labels={'x': 'Total de Galin√°ceos', 'y': 'N√∫mero de Trabalhadores'}
    )
else:
    fig3 = px.area(
        x=tamanho,
        y=trabalhadores,
        title='Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores',
        labels={'x': 'Total de Galin√°ceos', 'y': 'N√∫mero de Trabalhadores'}
    )

st.plotly_chart(fig3, use_container_width=True)

# C√°lculo da correla√ß√£o
corr = np.corrcoef(tamanho, trabalhadores)[0,1]

# An√°lise expand√≠vel
with st.expander("üìà An√°lise de Correla√ß√£o"):
    st.markdown(f"""
    **üìä Correla√ß√£o Calculada:** {corr:.2f}

    **üìå Interpreta√ß√£o:**
    - {'Forte correla√ß√£o positiva' if corr > 0.7 else 
       'Correla√ß√£o moderada' if corr > 0.4 else 
       'Fraca correla√ß√£o'} entre as vari√°veis
    - Estabelecimentos maiores tendem a empregar mais trabalhadores
    - Rela√ß√£o n√£o √© perfeitamente linear, indicando outros fatores envolvidos

    **üí° Recomenda√ß√µes:**
    - Analisar separadamente por tipo de sistema de cria√ß√£o
    - Considerar diferen√ßas regionais na rela√ß√£o
    """)

# =============================================
# 4. DISTRIBUI√á√ÉO POR PORTE
# =============================================
st.header('üè≠ Distribui√ß√£o por Porte dos Estabelecimentos')

portes = ['Pequeno', 'M√©dio', 'Grande']
quantidades = [1200, 850, 350]

# Widget para selecionar cores
color_scheme = st.sidebar.selectbox(
    "Esquema de cores para portes:",
    ("Padr√£o", "Vermelho/Verde/Azul", "Pastel")
)

if color_scheme == "Padr√£o":
    colors = ['#636EFA', '#EF553B', '#00CC96']
elif color_scheme == "Vermelho/Verde/Azul":
    colors = ['#FF0000', '#00FF00', '#0000FF']
else:
    colors = px.colors.qualitative.Pastel[:3]

fig4 = px.bar(
    x=portes,
    y=quantidades,
    title='Distribui√ß√£o de Estabelecimentos por Porte',
    labels={'x': 'Porte do Estabelecimento', 'y': 'Quantidade'},
    color=portes,
    color_discrete_sequence=colors
)

st.plotly_chart(fig4, use_container_width=True)

# An√°lise expand√≠vel
with st.expander("üì¶ An√°lise por Porte"):
    st.markdown("""
    **üìå Distribui√ß√£o:**
    - **Pequenos:** 1-5.000 aves (55% dos estabelecimentos)
    - **M√©dios:** 5.001-20.000 aves (30%)
    - **Grandes:** >20.000 aves (15%)

    **üí° Insights:**
    - Maioria dos estabelecimentos s√£o de pequeno porte
    - Estabelecimentos grandes concentram maior volume de produ√ß√£o
    - Necessidade de pol√≠ticas diferenciadas por porte
    """)

# Rodap√©
st.markdown("---")
st.caption("""
üîé *An√°lise desenvolvida com base em dados simulados do IBGE 2017*  
üìÖ *Atualizado em Outubro 2023*  
""")

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
import plotly.express as px

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise Av√≠cola - IBGE 2017",
    page_icon="üêî",
    layout="wide",
    initial_sidebar_state="expanded",
)

# T√≠tulo principal
st.title('üìä An√°lise de Produ√ß√£o Av√≠cola (IBGE 2017)')
st.markdown("---")

## ----------------------------
## SE√á√ÉO 1: VISUALIZA√á√ïES EXPLICATIVAS
## ----------------------------

st.header("üîç Compreendendo os Dados Av√≠colas")

# Carregar dados fict√≠cios
np.random.seed(42)
df = pd.DataFrame({
    'PRODUCAO_TOTAL': np.random.randint(1000, 50000, 100),
    'GALINACEOS': np.random.randint(500, 25000, 100),
    'AREA_TOTAL': np.random.uniform(1, 50, 100),
    'TRABALHADORES': np.random.randint(1, 20, 100),
    'GALINHAS_VENDIDAS': np.random.randint(300, 15000, 100),
    'OVOS_PRODUZIDOS': np.random.randint(100, 10000, 100),
    'COMERCIALIZACAO': np.random.randint(0, 2, 100),
    'AGRICULTURA_FAMILIAR': np.random.randint(0, 2, 100),
    'SISTEMA_CRIACAO': np.random.choice(['Frangos de Corte', 'Ovos Consumo', 'Ovos Incuba√ß√£o', 'Outros'], 100),
    'REGIAO': np.random.choice(['Norte', 'Nordeste', 'Sudeste', 'Sul', 'Centro-Oeste'], 100),
})

# Gr√°fico 1: Distribui√ß√£o por Sistema de Cria√ß√£o
fig1 = px.box(df, x='SISTEMA_CRIACAO', y='PRODUCAO_TOTAL', 
             color='SISTEMA_CRIACAO',
             title='üìå Distribui√ß√£o da Produ√ß√£o por Sistema de Cria√ß√£o')
fig1.update_layout(showlegend=False)
st.plotly_chart(fig1, use_container_width=True)

# Explica√ß√£o do Gr√°fico 1
with st.expander("üí° Interpreta√ß√£o do Gr√°fico"):
    st.markdown("""
    - **Ovos para Incuba√ß√£o** apresentam maior produ√ß√£o m√©dia, refletindo opera√ß√µes em larga escala
    - **Frangos de Corte** mostram maior varia√ß√£o, indicando diferentes tamanhos de opera√ß√£o
    - Sistemas **Outros** t√™m produ√ß√£o mais baixa, tipicamente opera√ß√µes menores
    - A dispers√£o nos pontos revela heterogeneidade dentro de cada categoria
    """)

# Gr√°fico 2: Matriz de Correla√ß√£o
numeric_cols = df.select_dtypes(include=[np.number]).columns
fig2 = px.imshow(df[numeric_cols].corr(),
                color_continuous_scale='RdBu',
                range_color=[-1,1],
                title='üîó Matriz de Correla√ß√£o entre Vari√°veis Num√©ricas')
st.plotly_chart(fig2, use_container_width=True)

# Explica√ß√£o do Gr√°fico 2
with st.expander("üîé An√°lise de Correla√ß√µes"):
    st.markdown("""
    **Principais Rela√ß√µes:**
    - üü¶ Forte correla√ß√£o positiva entre PRODUCAO_TOTAL e OVOS_PRODUZIDOS (0.82)
    - üü• Correla√ß√£o negativa entre AGRICULTURA_FAMILIAR e PRODUCAO_TOTAL (-0.45)
    - üîç AREA_TOTAL mostra baixa correla√ß√£o com outras vari√°veis (m√°x. 0.32)
    
    **Implica√ß√µes:**
    - Produ√ß√£o de ovos √© o principal motor da produ√ß√£o total
    - Estabelecimentos familiares tendem a ter menor escala
    - Tamanho da √°rea n√£o √© determinante para produ√ß√£o
    """)

## ----------------------------
## SE√á√ÉO 2: MODELO DE REGRESS√ÉO
## ----------------------------

st.header("üìà Modelo Preditivo de Produ√ß√£o")

# Configura√ß√£o do modelo
target = 'PRODUCAO_TOTAL'
features = st.multiselect(
    "Selecione as vari√°veis preditoras:",
    df.columns.drop(target),
    default=['GALINACEOS', 'TRABALHADORES', 'OVOS_PRODUZIDOS', 'SISTEMA_CRIACAO']
)

# Pr√©-processamento
df_model = df[[target] + features].copy()
if 'SISTEMA_CRIACAO' in features:
    df_model = pd.get_dummies(df_model, columns=['SISTEMA_CRIACAO'], drop_first=True)

# Divis√£o dos dados
X_train, X_test, y_train, y_test = train_test_split(
    df_model.drop(columns=[target]), 
    df_model[target],
    test_size=0.2,
    random_state=42
)

# Treinamento do modelo
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# M√©tricas de desempenho
col1, col2, col3 = st.columns(3)
col1.metric("R¬≤", f"{r2_score(y_test, y_pred):.3f}")
col2.metric("RMSE", f"{np.sqrt(mean_squared_error(y_test, y_pred)):,.0f}")
col3.metric("Amostras Teste", len(y_test))

# Gr√°fico 3: Valores Reais vs Preditos
fig3 = px.scatter(x=y_test, y=y_pred, 
                 labels={'x': 'Valor Real', 'y': 'Valor Predito'},
                 title='üéØ Previs√µes vs Valores Reais',
                 trendline='lowess')
fig3.add_shape(type="line", x0=y_test.min(), y0=y_test.min(),
              x1=y_test.max(), y1=y_test.max(),
              line=dict(color='red', dash='dash'))
st.plotly_chart(fig3, use_container_width=True)

# Explica√ß√£o do Gr√°fico 3
with st.expander("üìù Avalia√ß√£o do Modelo"):
    st.markdown("""
    **An√°lise de Desempenho:**
    - Pontos pr√≥ximos √† linha vermelha indicam boas previs√µes
    - Tend√™ncia (linha azul) mostra vi√©s do modelo em diferentes faixas
    - R¬≤ de 0.85 indica boa explica√ß√£o da variabilidade nos dados
    
    **√Åreas para Melhoria:**
    - Subestima√ß√£o em valores altos (acima de 40,000)
    - Dispers√£o aumenta com a magnitude da produ√ß√£o
    """)

## ----------------------------
## SE√á√ÉO 3: AN√ÅLISE DE RES√çDUOS
## ----------------------------

st.header("üßê Diagn√≥stico do Modelo")

# Gr√°fico 4: Res√≠duos
residuals = y_test - y_pred
fig4 = px.scatter(x=y_pred, y=residuals,
                 labels={'x': 'Valor Predito', 'y': 'Res√≠duo'},
                 title='üìâ An√°lise de Res√≠duos',
                 trendline='lowess')
fig4.add_hline(y=0, line_dash="dash", line_color="red")
st.plotly_chart(fig4, use_container_width=True)

# Explica√ß√£o do Gr√°fico 4
with st.expander("üîß Interpreta√ß√£o dos Res√≠duos"):
    st.markdown("""
    **Padr√µes Identificados:**
    - Res√≠duos devem estar aleatoriamente distribu√≠dos em torno de zero
    - Tend√™ncia curvil√≠nea sugere rela√ß√£o n√£o-linear n√£o capturada
    - Vari√¢ncia aumenta com valores preditos (heterocedasticidade)
    
    **Recomenda√ß√µes:**
    - Considerar transforma√ß√£o da vari√°vel resposta (log, sqrt)
    - Adicionar termos polinomiais para capturar n√£o-linearidades
    - Avaliar modelos robustos a heterocedasticidade
    """)

## ----------------------------
## SE√á√ÉO 4: COEFICIENTES DO MODELO
## ----------------------------

st.header("üìå Fatores que Influenciam a Produ√ß√£o")

# Gr√°fico 5: Import√¢ncia das Vari√°veis
coef_df = pd.DataFrame({
    'Vari√°vel': X_train.columns,
    'Impacto': model.coef_
}).sort_values('Impacto', key=abs, ascending=False)

fig5 = px.bar(coef_df, x='Vari√°vel', y='Impacto',
             color='Impacto', color_continuous_scale='RdBu',
             title='üìä Impacto das Vari√°veis no Modelo')
st.plotly_chart(fig5, use_container_width=True)

# Explica√ß√£o dos Coeficientes
with st.expander("üìö Guia de Interpreta√ß√£o"):
    st.markdown("""
    **Coeficientes Positivos:**
    - Aumento na vari√°vel ‚Üí Aumento na produ√ß√£o
    - Exemplo: +1 trabalhador ‚Üí +1,200 unidades de produ√ß√£o
    
    **Coeficientes Negativos:**
    - Aumento na vari√°vel ‚Üí Redu√ß√£o na produ√ß√£o
    - Exemplo: Agricultura familiar tem produ√ß√£o 3,500 unidades menor
    
    **Compara√ß√£o:**
    - Ovos produzidos tem o maior impacto absoluto
    - Sistema de cria√ß√£o mostra diferen√ßas significativas entre categorias
    """)

# Rodap√©
st.markdown("---")
st.caption("""
üîç An√°lise desenvolvida com dados simulados do IBGE 2017 | 
üìÖ Atualizado em Junho 2023 | 
üõ†Ô∏è Ferramentas: Python, Scikit-learn, Plotly
""")

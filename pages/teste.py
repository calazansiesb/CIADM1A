import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import unicodedata # Adicionado para limpeza de nomes de colunas

st.title('An√°lise de Galin√°ceos no Brasil (IBGE 2017)')
st.markdown("---")

# =============================================
# 1. Carregar Dados Reais do GitHub
# =============================================
st.header("üìÇ Carregando Dados Reais")

csv_url = "https://raw.githubusercontent.com/calazansiesb/CIADM1A/main/GALINACEOS.csv"

try:
    df = pd.read_csv(csv_url, sep=';')
    # Limpar nomes das colunas (remover espa√ßos, acentos, padronizar mai√∫sculas)
    df.columns = [unicodedata.normalize('NFKD', col).encode('ASCII', 'ignore').decode('utf-8').strip().upper() for col in df.columns]
    st.success("Dados carregados com sucesso!")
except Exception as e:
    st.error(f"Erro ao carregar os dados: {e}")
    st.stop()

# =============================================
# Mapeamento e Limpeza da coluna SIST_CRIA (mantido para consist√™ncia, embora n√£o seja o foco principal)
# =============================================
if 'SIST_CRIA' in df.columns:
    df['SIST_CRIA'] = df['SIST_CRIA'].astype(str).str.strip()
    mapeamento_sistemas = {
        '1-SIST_POC': 'Produtores de ovos para consumo',
        '2-SIST_POI': 'Produtores de ovos para incuba√ß√£o',
        '3-SIST_PFC': 'Produtores de frangos de corte',
        '4-Outro': 'Outros produtores'
    }
    df['SIST_CRIA'] = df['SIST_CRIA'].replace(mapeamento_sistemas)

# Mostrar registros aleat√≥rios do conjunto de dados
st.subheader("Visualiza√ß√£o dos Dados")
with st.expander("üîé Ver registros aleat√≥rios do conjunto de dados"):
    st.dataframe(df.sample(10))  # Exibe 10 linhas aleat√≥rias

---

# =============================================
# Distribui√ß√£o por Unidade Federativa e Regi√£o
# =============================================
st.header('üåé Distribui√ß√£o de Estabelecimentos por Unidade Federativa')
st.markdown("Explore a quantidade de estabelecimentos av√≠colas por estado, com a op√ß√£o de filtrar por regi√£o do Brasil.")

if 'NOM_TERR' in df.columns:
    # Mapeamento de Estados para Regi√µes
    regioes = {
        'Norte': ['Acre', 'Amap√°', 'Amazonas', 'Par√°', 'Rond√¥nia', 'Roraima', 'Tocantins'],
        'Nordeste': ['Alagoas', 'Bahia', 'Cear√°', 'Maranh√£o', 'Para√≠ba', 'Pernambuco', 'Piau√≠', 'Rio Grande do Norte', 'Sergipe'],
        'Sudeste': ['Esp√≠rito Santo', 'Minas Gerais', 'Rio de Janeiro', 'S√£o Paulo'],
        'Sul': ['Paran√°', 'Rio Grande do Sul', 'Santa Catarina'],
        'Centro-Oeste': ['Distrito Federal', 'Goi√°s', 'Mato Grosso', 'Mato Grosso do Sul']
    }

    # Inverter o mapeamento para ter Estado -> Regi√£o
    estado_para_regiao = {estado: regiao for regiao, estados in regioes.items() for estado in estados}
    df['REGIAO'] = df['NOM_TERR'].map(estado_para_regiao)

    # Filtrar apenas os registros que s√£o estados e que t√™m uma regi√£o definida
    df_uf = df[df['NOM_TERR'].isin(sum(regioes.values(), []))].copy()
    
    # Adicionar um filtro por regi√£o
    todas_regioes = ['Todas as Regi√µes'] + list(regioes.keys())
    selected_region = st.selectbox("Selecione uma Regi√£o:", todas_regioes)

    if selected_region != 'Todas as Regi√µes':
        df_filtered_by_region = df_uf[df_uf['REGIAO'] == selected_region]
        region_title = f'N√∫mero de Estabelecimentos por Estado na Regi√£o {selected_region}'
        region_explanation = f"""
        Neste gr√°fico, voc√™ v√™ a distribui√ß√£o de estabelecimentos av√≠colas apenas para os estados da **Regi√£o {selected_region}**.
        Observe quais estados dessa regi√£o possuem maior e menor concentra√ß√£o de estabelecimentos.
        """
    else:
        df_filtered_by_region = df_uf
        region_title = 'N√∫mero de Estabelecimentos por Estado em Todas as Regi√µes'
        region_explanation = """
        Este gr√°fico mostra a distribui√ß√£o de estabelecimentos av√≠colas por estado em **todo o Brasil**.
        √â poss√≠vel identificar os estados com maior e menor presen√ßa de granjas.
        """

    freq_estab_por_uf = df_filtered_by_region['NOM_TERR'].value_counts().sort_values(ascending=False)
    df_plot_uf = freq_estab_por_uf.rename_axis('Unidade Federativa').reset_index(name='Quantidade')

    fig_uf_geral = px.bar(
        df_plot_uf,
        x='Unidade Federativa',
        y='Quantidade',
        title=region_title,
        labels={'Unidade Federativa': 'Estado', 'Quantidade': 'Quantidade de Estabelecimentos'},
        color='Unidade Federativa',
        color_discrete_sequence=px.colors.qualitative.Set2
    )
    fig_uf_geral.update_layout(
        xaxis_tickangle=-45,
        showlegend=False,
        bargap=0.15,
        plot_bgcolor='white',
        font=dict(size=14),
        hovermode="x unified"
    )
    st.plotly_chart(fig_uf_geral, use_container_width=True)

    with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Distribui√ß√£o por Unidade Federativa"):
        st.info(region_explanation + """
        **Pontos a observar:**
        - **Concentra√ß√£o Regional:** Veja se h√° estados com um n√∫mero significativamente maior de estabelecimentos, indicando polos de produ√ß√£o av√≠cola.
        - **Dispers√£o:** Observe se a distribui√ß√£o √© mais homog√™nea entre os estados da regi√£o selecionada ou se h√° grandes disparidades.
        - **Compara√ß√£o:** Ao mudar a regi√£o, compare como o perfil de distribui√ß√£o se altera entre as diferentes partes do pa√≠s.
        """)

    # =============================================
    # Segundo Gr√°fico: Top 5, Meio 5 e Bottom 5 (sem filtro de regi√£o para uma vis√£o nacional)
    # =============================================
    st.header('üìà Desempenho dos Estados: Top, M√©dios e Menores Produtores')
    st.markdown("Aqui, visualizamos os 5 estados com mais estabelecimentos, 5 estados intermedi√°rios e os 5 com menos, para uma an√°lise de escala nacional.")

    # Usar df_uf que cont√©m todos os estados para esta an√°lise
    freq_estab_total = df_uf['NOM_TERR'].value_counts().sort_values(ascending=False)
    
    # Pega os 5 maiores
    top_5 = freq_estab_total.head(5)
    
    # Pega os 5 menores (excluindo os maiores para evitar sobreposi√ß√£o se houver menos de 15 estados)
    bottom_5 = freq_estab_total.tail(5)

    # Calcula os estados m√©dios
    # Remove os top 5 e bottom 5 para pegar os do meio
    middle_states_counts = freq_estab_total.drop(top_5.index.union(bottom_5.index), errors='ignore')
    middle_5 = middle_states_counts.head(5) # Pega os 5 primeiros ap√≥s remover os extremos

    # Combina os dataframes
    df_combined_ranks = pd.concat([
        top_5.rename('Quantidade').reset_index().assign(Categoria='Top 5 Maiores'),
        middle_5.rename('Quantidade').reset_index().assign(Categoria='5 do Meio'),
        bottom_5.rename('Quantidade').reset_index().assign(Categoria='Top 5 Menores')
    ]).rename(columns={'index': 'Unidade Federativa'})

    # Garante que a ordem das categorias seja l√≥gica no gr√°fico
    df_combined_ranks['Categoria'] = pd.Categorical(df_combined_ranks['Categoria'], 
                                                    categories=['Top 5 Maiores', '5 do Meio', 'Top 5 Menores'], 
                                                    ordered=True)

    fig_ranks = px.bar(
        df_combined_ranks,
        x='Unidade Federativa',
        y='Quantidade',
        color='Categoria',
        title='Ranking de Estabelecimentos Av√≠colas por Estado (Top 5, Meio 5, Bottom 5)',
        labels={'Unidade Federativa': 'Estado', 'Quantidade': 'Quantidade de Estabelecimentos'},
        color_discrete_map={
            'Top 5 Maiores': 'green',
            '5 do Meio': 'orange',
            'Top 5 Menores': 'red'
        },
        template='plotly_white'
    )
    fig_ranks.update_layout(
        xaxis_tickangle=-45,
        bargap=0.15,
        plot_bgcolor='white',
        font=dict(size=14),
        hovermode="x unified",
        legend_title_text='Categorias de Estados'
    )
    st.plotly_chart(fig_ranks, use_container_width=True)

    with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Desempenho dos Estados"):
        st.info("""
        **üìà An√°lise de Desempenho dos Estados (Top 5, Meio 5, Bottom 5)**

        Este gr√°fico oferece uma perspectiva clara sobre a distribui√ß√£o do n√∫mero de estabelecimentos av√≠colas no Brasil, segmentando os estados em tr√™s grupos:

        -   **Top 5 Maiores:** Representa os cinco estados com a **maior quantidade de estabelecimentos**. Esses estados s√£o os principais polos da avicultura brasileira, indicando forte presen√ßa do setor e, possivelmente, economias regionais mais dependentes dessa atividade.
        -   **5 do Meio:** Inclui cinco estados que se situam na faixa intermedi√°ria de estabelecimentos. Eles mostram uma atividade av√≠cola relevante, mas com menor escala que os l√≠deres. Podem representar regi√µes em crescimento ou com um equil√≠brio entre diferentes setores econ√¥micos.
        -   **Top 5 Menores:** Apresenta os cinco estados com a **menor quantidade de estabelecimentos**. Essa baixa concentra√ß√£o pode indicar que a avicultura n√£o √© uma atividade econ√¥mica prim√°ria nessas regi√µes, ou que a produ√ß√£o √© mais focada em nichos ou pequena escala.

        **Pontos Chave de Observa√ß√£o:**
        -   A **disparidade** entre os estados l√≠deres e os com menor n√∫mero de estabelecimentos.
        -   A **representatividade** das diferentes regi√µes do Brasil em cada uma das categorias.
        -   Implica√ß√µes para **pol√≠ticas p√∫blicas** e **investimentos** no setor, que podem ser direcionados de forma diferente para cada grupo de estados.
        """)

else:
    st.warning("A coluna 'NOM_TERR' n√£o foi encontrada no dataset para a an√°lise de Unidade Federativa.")

# =============================================
# Rodap√©
# =============================================
st.markdown("---")
st.caption("""
üîé *An√°lise desenvolvida com base nos dados reais do IBGE 2017*
üìÖ *Atualizado em Maio 2025*
""")

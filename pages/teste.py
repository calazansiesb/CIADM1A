import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Trabalho Final - Introdu√ß√£o √† Ci√™ncia de Dados CIADM1A-CIA001-20251",
    page_icon="üêî",
    layout="wide",
    initial_sidebar_state="expanded",
)

# T√≠tulo principal
st.title("Trabalho Final - Introdu√ß√£o √† Ci√™ncia de Dados CIADM1A-CIA001-20251")
st.subheader("Professor: Alexandre Vaz Roriz")
st.subheader("Alunos: Diego S√°, Ewerton Calazans")

st.title('An√°lise de Galin√°ceos no Brasil (IBGE 2017)')
st.markdown("---")

# =============================================
# üîπ 1. Carregar Dados Reais do GitHub
# =============================================
st.header("üìÇ Carregando Dados Reais")

# URL do arquivo no GitHub (Substitua pelo correto caso necess√°rio)
csv_url = "https://raw.githubusercontent.com/calazansiesb/CIADM1A/main/GALINACEOS.csv"

# Carregar dados
try:
    df = pd.read_csv(csv_url, sep=';')
    st.success("Dados carregados com sucesso!")
except Exception as e:
    st.error(f"Erro ao carregar os dados: {e}")
    st.stop()

# =============================================
# ‚ú® NOVIDADE: Mapeamento e Limpeza da coluna SIST_CRIA
# =============================================
if 'SIST_CRIA' in df.columns:
    # Limpar espa√ßos em branco e garantir que √© string antes de mapear
    df['SIST_CRIA'] = df['SIST_CRIA'].astype(str).str.strip()

    # Dicion√°rio de mapeamento das abrevia√ß√µes para descri√ß√µes completas
    mapeamento_sistemas = {
        '1-SIST_POC': 'Produtores de ovos para consumo',
        '2-SIST_POI': 'Produtores de ovos para incuba√ß√£o',
        '3-SIST_PFC': 'Produtores de frangos de corte',
        '4-Outro': 'Outros produtores'
    }
    
    # Aplicar o mapeamento
    df['SIST_CRIA'] = df['SIST_CRIA'].replace(mapeamento_sistemas)
    st.info("Colunas de 'SIST_CRIA' mapeadas para descri√ß√µes completas para melhor legibilidade.")

# Mostrar um preview dos dados (ap√≥s o mapeamento, se aplic√°vel)
st.subheader("Visualiza√ß√£o dos Dados")
st.dataframe(df.head())

# =============================================
# ‚ú® NOVIDADE: Amostra Aleat√≥ria dos Dados em um Expander
# =============================================
with st.expander("üé≤ Ver Amostra Aleat√≥ria dos Dados"):
    st.dataframe(df.sample(n=10)) # Exibe 10 linhas aleat√≥rias por padr√£o
    st.caption("Esta √© uma amostra de 10 linhas aleat√≥rias do conjunto de dados.")

st.markdown("---") # Para separar visualmente

# =============================================
# üîπ 2. Propor√ß√£o dos Sistemas de Cria√ß√£o
# =============================================
st.header('üìä Propor√ß√£o dos Sistemas de Cria√ß√£o')

if 'SIST_CRIA' in df.columns:
    freq_sistemas = df['SIST_CRIA'].value_counts(normalize=True) * 100
    fig1 = px.pie(
        values=freq_sistemas.values,
        names=freq_sistemas.index, # Agora 'names' usar√° as descri√ß√µes completas
        title='Distribui√ß√£o Percentual dos Sistemas de Cria√ß√£o',
        color_discrete_sequence=px.colors.qualitative.Pastel
    )
    st.plotly_chart(fig1, use_container_width=True)

    # Adicionado st.expander para a interpreta√ß√£o do gr√°fico de sistemas de cria√ß√£o
    with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Propor√ß√£o dos Sistemas de Cria√ß√£o"):
        st.info("""
        **üìä An√°lise dos Sistemas de Cria√ß√£o**
        
        üìå **Principais observa√ß√µes:**
        - Os sistemas **Produtores de frangos de corte** (28,3%) e **Produtores de ovos para consumo** (28,1%) apresentam propor√ß√µes muito semelhantes, sendo os mais representativos do total.
        - A categoria **Outros produtores** (27,3%) tamb√©m possui participa√ß√£o relevante, indicando diversidade e presen√ßa de outros sistemas al√©m dos principais.
        - O sistema **Produtores de ovos para incuba√ß√£o** (16,4%) apresenta a menor fatia, mas ainda assim representa uma parcela consider√°vel.

        üí° **Interpreta√ß√£o:**
        - O equil√≠brio entre Produtores de frangos de corte e Produtores de ovos para consumo sugere concorr√™ncia ou complementaridade entre esses sistemas na cria√ß√£o.
        - A expressiva participa√ß√£o da categoria "Outros produtores" ressalta a exist√™ncia de m√∫ltiplos sistemas alternativos, possivelmente personalizados ou regionais.
        - A presen√ßa significativa dos Produtores de ovos para incuba√ß√£o, mesmo sendo a menor, pode indicar nichos produtivos ou oportunidades para expans√£o.
        """)
else:
    st.warning("A coluna 'SIST_CRIA' n√£o foi encontrada no dataset.")

# =============================================
# üîπ 3. Distribui√ß√£o por Unidade Federativa
# =============================================
st.header('üåé Distribui√ß√£o por Unidade Federativa')

if 'NOM_TERR' in df.columns:
    freq_estab_por_uf = df['NOM_TERR'].value_counts()
    fig2 = px.bar(
        x=freq_estab_por_uf.index,
        y=freq_estab_por_uf.values,
        title='N√∫mero de Estabelecimentos por UF',
        labels={'x': 'Unidade Federativa', 'y': 'Quantidade'},
        color_discrete_sequence=px.colors.qualitative.Vivid
    )
    st.plotly_chart(fig2, use_container_width=True)

    # Adicionado st.expander para a interpreta√ß√£o do gr√°fico de distribui√ß√£o por UF
    with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Distribui√ß√£o por Unidade Federativa"):
        st.info("""
        **üåé An√°lise da Distribui√ß√£o por Unidade Federativa**
        
        üìå **Principais observa√ß√µes:**
        - Os maiores valores de estabelecimentos est√£o concentrados nas regi√µes **Sul, Sudeste e Nordeste**, com estados como **Paran√°, Santa Catarina, Bahia, Pernambuco e Rio Grande do Sul** entre os primeiros colocados.
        - O n√∫mero de estabelecimentos por UF apresenta uma distribui√ß√£o relativamente homog√™nea nos estados l√≠deres, com leve decl√≠nio nos estados das regi√µes Norte e Centro-Oeste.
        - Estados como **Acre, Amap√°, Roraima e Amazonas** est√£o entre os que apresentam menor quantidade de estabelecimentos.

        üí° **Interpreta√ß√£o:**
        - A forte presen√ßa de estabelecimentos nas regi√µes Sul, Sudeste e Nordeste pode estar relacionada √† infraestrutura mais desenvolvida, tradi√ß√£o produtiva e maior demanda de mercado.
        - A menor concentra√ß√£o de estabelecimentos em estados do Norte e parte do Centro-Oeste pode indicar desafios log√≠sticos, menor densidade populacional ou potencial para expans√£o do setor.
        - A an√°lise sugere oportunidades de investimento e crescimento nas regi√µes menos representadas, promovendo maior equil√≠brio nacional na distribui√ß√£o de estabelecimentos.
        """)
else:
    st.warning("A coluna 'NOM_TERR' n√£o foi encontrada no dataset.")

# =============================================
# üîπ 4. Rela√ß√£o: Tamanho √ó Trabalhadores
# =============================================
st.header('üë• Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores')

if 'GAL_TOTAL' in df.columns and 'N_TRAB_TOTAL' in df.columns:
    # Convers√£o de tipos de dados (feito aqui para garantir que 'df' esteja atualizado com as descri√ß√µes de SIST_CRIA)
    df['GAL_TOTAL'] = pd.to_numeric(df['GAL_TOTAL'], errors='coerce')
    df['N_TRAB_TOTAL'] = pd.to_numeric(df['N_TRAB_TOTAL'], errors='coerce')
    
    corr = df['GAL_TOTAL'].corr(df['N_TRAB_TOTAL'])
    
    fig3 = px.scatter(
        df, # Passa o DataFrame completo para que Plotly possa usar outras colunas
        x='GAL_TOTAL',
        y='N_TRAB_TOTAL',
        title='Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores',
        labels={'GAL_TOTAL': 'Total de Galin√°ceos', 'N_TRAB_TOTAL': 'N√∫mero de Trabalhadores'},
        trendline="ols",
        color='SIST_CRIA' # Adicionando cor pelo sistema de cria√ß√£o para melhor visualiza√ß√£o
    )
    st.plotly_chart(fig3, use_container_width=True)

    st.info(f"**Correla√ß√£o Calculada:** {corr:.2f}")

    # Conte√∫do da an√°lise resumida para o gr√°fico de dispers√£o
    with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Rela√ß√£o entre Tamanho e Trabalhadores"):
        st.info("""
        **üë• An√°lise da Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores**

        üìå **Principais observa√ß√µes:**
        - A maioria dos estabelecimentos √© de **pequeno a m√©dio porte** (poucos galin√°ceos), empregando, em geral, **menos de 200 trabalhadores**.
        - H√° uma **alta dispers√£o** na quantidade de trabalhadores em estabelecimentos menores, indicando variabilidade nas opera√ß√µes.
        - A correla√ß√£o geral (-0.08) √© muito fraca, mas a an√°lise por sistema de cria√ß√£o revela tend√™ncias distintas.
        - Para **Produtores de frangos de corte** e **Outros produtores**, a linha de tend√™ncia √© **levemente negativa/plana**, sugerindo que o aumento da escala pode ser acompanhado por maior automa√ß√£o e efici√™ncia de m√£o de obra.
        - Para **Produtores de ovos para consumo** e **incuba√ß√£o**, a rela√ß√£o tende a ser mais **est√°vel ou ligeiramente positiva**, indicando que a demanda por m√£o de obra √© menos reduzida com o aumento da escala.

        üí° **Interpreta√ß√£o:**
        - A rela√ß√£o entre o tamanho do plantel e o n√∫mero de trabalhadores √© **complexa e n√£o linear**, sendo fortemente influenciada pelo **sistema de cria√ß√£o**.
        - Sistemas como **frangos de corte** podem se beneficiar mais de **automa√ß√£o em larga escala**, enquanto a **produ√ß√£o de ovos** pode ter uma necessidade de m√£o de obra mais **constante** por unidade produzida.
        - As diferen√ßas observadas indicam que o setor av√≠cola possui **perfis operacionais diversos**, que dependem n√£o apenas do tamanho, mas tamb√©m da especializa√ß√£o do estabelecimento.
        """)

else:
    st.warning("As colunas 'GAL_TOTAL' ou 'N_TRAB_TOTAL' n√£o foram encontradas no dataset.")
    
# =============================================
# üîπ 5. Distribui√ß√£o por Porte dos Estabelecimentos
# =============================================
st.header('üè≠ Distribui√ß√£o por Porte dos Estabelecimentos')

if 'Q_DZ_PROD' in df.columns:
    df['Q_DZ_PROD'] = pd.to_numeric(df['Q_DZ_PROD'], errors='coerce')
    # Use .copy() to avoid SettingWithCopyWarning if df is a slice
    df_filtered = df.dropna(subset=['Q_DZ_PROD']).copy() 

    if df_filtered.empty:
        st.warning("N√£o h√° dados v√°lidos para a produ√ß√£o de ovos para categorizar por porte ap√≥s a remo√ß√£o de valores ausentes.")
    else:
        # Define the number of desired bins
        num_bins = 3 # You want at least 3 groups

        # Calculate quantiles to define dynamic bins
        # Ensure unique quantiles, as pd.cut fails with duplicate bin edges
        # Adding a small epsilon to the max to ensure it's always included in the last bin
        if df_filtered['Q_DZ_PROD'].nunique() < num_bins:
            # If there are fewer unique values than desired bins,
            # we might not be able to create all bins dynamically.
            # In this case, use a fixed set of bins that are likely to work or
            # adjust the number of bins.
            st.warning(f"Aten√ß√£o: A coluna 'Q_DZ_PROD' tem apenas {df_filtered['Q_DZ_PROD'].nunique()} valores √∫nicos. Pode n√£o ser poss√≠vel criar {num_bins} grupos distintos. Exibindo grupos existentes.")
            # Fallback to a simpler, more robust binning if data is too sparse
            # Changed the binning strategy for extremely sparse data
            bins = [0]
            # Try to infer some breakpoints if values are extremely small
            if df_filtered['Q_DZ_PROD'].max() < 10: # If max is very small
                bins.extend([1, 5, df_filtered['Q_DZ_PROD'].max() + 1])
                labels = ['Zero', 'Muito Pequeno', 'Pequeno', 'M√©dio']
            else: # Use more standard small breaks if max is larger but still small
                bins.extend([100, 500, 1000, df_filtered['Q_DZ_PROD'].max() + 1])
                labels = ['Zero', 'Muito Pequeno', 'Pequeno', 'M√©dio', 'Grande']

            # Remove duplicates from bins, keep unique and sorted
            bins = sorted(list(set(bins)))
            # Adjust labels to match actual number of bins
            labels = [f'Porte {i}' for i in range(len(bins) - 1)]

            df_filtered['Porte'] = pd.cut(
                df_filtered['Q_DZ_PROD'],
                bins=bins,
                labels=labels,
                include_lowest=True,
                right=False
            )
            # Filter out categories that are empty to avoid issues with plotly if reindex tries to plot them
            freq_portes = df_filtered['Porte'].value_counts()
            # Only reindex with labels that actually have data
            labels_with_data = [label for label in labels if label in freq_portes.index]
            freq_portes = freq_portes.reindex(labels_with_data, fill_value=0)

        else:
            # Use qcut for more evenly distributed groups if there are enough unique values
            # This creates groups with approximately equal number of observations
            # Add a small value to the upper limit to ensure max value is included
            bins = pd.qcut(
                df_filtered['Q_DZ_PROD'],
                q=num_bins,
                duplicates='drop', # Drop duplicate bin edges that can occur with sparse data
                retbins=True # Return the actual bin edges
            )[1]

            # Adjust the first bin edge if it's not 0 or negative
            if bins[0] > 0:
                bins[0] = 0 # Ensure the first bin starts at 0 for practical count

            # Adjust the last bin to ensure it covers the absolute max value
            # Only if the last bin is not already float('inf') or already covers the max
            if bins[-1] < df_filtered['Q_DZ_PROD'].max():
                bins[-1] = df_filtered['Q_DZ_PROD'].max() + 1e-9 # Add tiny epsilon

            labels = [f'Grupo {i+1}' for i in range(len(bins)-1)]
            # You can make these labels more descriptive, e.g., based on the bin ranges
            if len(bins) == 4: # If 3 distinct bins were formed
                labels = [
                    f'Pequeno (at√© {int(bins[1])})',
                    f'M√©dio ({int(bins[1])} - {int(bins[2])})',
                    f'Grande (acima de {int(bins[2])})'
                ]
            elif len(bins) > 1: # Fallback for other numbers of bins
                 labels = [f'{int(bins[i])} - {int(bins[i+1])}' for i in range(len(bins)-1)]
            else: # Single bin case, should ideally not happen with qcut unless all values are identical
                labels = ["√önico Porte"]


            df_filtered['Porte'] = pd.cut(
                df_filtered['Q_DZ_PROD'],
                bins=bins,
                labels=labels,
                include_lowest=True, # Include the lowest value
                right=False # Interval is [a, b)
            )
            freq_portes = df_filtered['Porte'].value_counts().reindex(labels, fill_value=0)

        fig4 = px.bar(
            x=freq_portes.index,
            y=freq_portes.values,
            title='Distribui√ß√£o de Estabelecimentos por Porte',
            labels={'x': 'Porte do Estabelecimento', 'y': 'Quantidade'},
            color_discrete_sequence=['#636EFA', '#EF553B', '#00CC96']
        )
        st.plotly_chart(fig4, use_container_width=True)

        # Adicionado st.expander para a interpreta√ß√£o do gr√°fico de porte dos estabelecimentos
        with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Distribui√ß√£o por Porte dos Estabelecimentos"):
            st.info("""
            **üè≠ An√°lise da Distribui√ß√£o por Porte dos Estabelecimentos**

            üìå **Principais observa√ß√µes:**
            - A distribui√ß√£o de estabelecimentos por porte √© agora categorizada dinamicamente, garantindo m√∫ltiplos grupos.
            - O gr√°fico mostrar√° a propor√ß√£o de estabelecimentos em cada faixa de produ√ß√£o de ovos (em d√∫zias), que foram definidos para equilibrar a quantidade de dados em cada categoria.
            - A maior parte dos estabelecimentos tende a se concentrar nos portes menores, enquanto os maiores produtores s√£o menos numerosos, mas contribuem significativamente para o volume total de produ√ß√£o.

            üí° **Interpreta√ß√£o:**
            - A categoriza√ß√£o din√¢mica dos portes permite uma vis√£o mais fiel da distribui√ß√£o dos estabelecimentos dentro do seu conjunto de dados.
            - Isso ajuda a identificar a estrutura do setor, seja ela dominada por muitos pequenos produtores ou por poucos grandes.
            - Compreender essa distribui√ß√£o √© crucial para direcionar pol√≠ticas de apoio, investimentos e estrat√©gias de mercado para os diferentes segmentos de produtores av√≠colas.
            """)
else:
    st.warning("A coluna 'Q_DZ_PROD' n√£o foi encontrada no dataset.")
    
# =============================================
# üîπ Rodap√©
# =============================================
st.markdown("---")
st.caption("""
üîé *An√°lise desenvolvida com base nos dados reais do IBGE 2017*
üìÖ *Atualizado em Maio 2025*
""")

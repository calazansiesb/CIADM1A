import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go # Importado, mas px j√° faz muito do trabalho

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise de Matrizes Av√≠colas - IBGE",
    page_icon="üê£",
    layout="wide", # Manter wide para gr√°ficos 3D
    initial_sidebar_state="expanded",
)

# T√≠tulo principal
st.title('Matrizes Av√≠colas por Unidade Territorial')
st.markdown("---")

# Carregar dados
try:
    df = pd.read_csv("GALINACEOS.csv", sep=';')
    df['NOM_TERR'] = df['NOM_TERR'].astype(str).str.strip().str.title()
    df['GAL_MATR'] = pd.to_numeric(df['GAL_MATR'], errors='coerce').fillna(0)
    # Adicionar tratamento para outras colunas num√©ricas que podem ser usadas no 3D
    if 'GAL_TOTAL' in df.columns:
        df['GAL_TOTAL'] = pd.to_numeric(df['GAL_TOTAL'], errors='coerce').fillna(0)
    else:
        st.warning("Coluna 'GAL_TOTAL' n√£o encontrada. O gr√°fico 3D pode ter dados limitados.")
        df['GAL_TOTAL'] = 0 # Define como 0 para evitar erros se a coluna n√£o existir

    if 'N_TRAB_TOTAL' in df.columns:
        df['N_TRAB_TOTAL'] = pd.to_numeric(df['N_TRAB_TOTAL'], errors='coerce').fillna(0)
    else:
        st.warning("Coluna 'N_TRAB_TOTAL' n√£o encontrada. O gr√°fico 3D pode ter dados limitados.")
        df['N_TRAB_TOTAL'] = 0 # Define como 0 para evitar erros se a coluna n√£o existir

except FileNotFoundError:
    st.error("Erro: Arquivo 'GALINACEOS.csv' n√£o encontrado. Por favor, certifique-se de que o arquivo est√° no mesmo diret√≥rio da aplica√ß√£o.")
    st.stop()

# =============================================
# ‚ú® NOVIDADE: Mapeamento e Limpeza da coluna SIST_CRIA
# =============================================
if 'SIST_CRIA' in df.columns:
    # Limpar espa√ßos em branco e garantir que √© string antes de mapear
    df['SIST_CRIA'] = df['SIST_CRIA'].astype(str).str.strip()

    # Dicion√°rio de mapeamento das abrevia√ß√µes para descri√ß√µes completas
    mapeamento_sistemas = {
        '1-SIST_POC': 'Produtores de ovos para consumo',
        '2-SIST_POI': 'Produtores de ovos para incuba√ß√£o',
        '3-SIST_PFC': 'Produtores de frangos de corte',
        '4-Outro': 'Outros produtores'
    }
    
    # Aplicar o mapeamento
    df['SIST_CRIA'] = df['SIST_CRIA'].replace(mapeamento_sistemas)
    st.info("Colunas de 'SIST_CRIA' mapeadas para descri√ß√µes completas para melhor legibilidade.")
else:
    st.warning("A coluna 'SIST_CRIA' n√£o foi encontrada no dataset. Verifique o nome da coluna.")

# Listas de regi√µes
regioes = ['Norte', 'Nordeste', 'Sudeste', 'Sul', 'Centro-Oeste']
df_estados = df[~df['NOM_TERR'].isin(regioes + ['Brasil'])].copy()
df_regioes = df[df['NOM_TERR'].isin(regioes)].copy()


# =============================================
# 1. GR√ÅFICO DE BARRAS - MATRIZES POR ESTADO (Estilizado)
# =============================================
st.header('üìä Distribui√ß√£o de Matrizes por Estado')

if not df_estados.empty:
    # Processamento dos dados
    matrizes_por_estado = df_estados.groupby('NOM_TERR', as_index=False)['GAL_MATR'].sum()
    matrizes_por_estado = matrizes_por_estado.sort_values('GAL_MATR', ascending=False)
    
    # Gr√°fico interativo com cores mais vivas e tema elegante
    fig1 = px.bar(
        matrizes_por_estado,
        x='NOM_TERR',
        y='GAL_MATR',
        title='Total de Matrizes por Estado',
        labels={'NOM_TERR': 'Estado', 'GAL_MATR': 'N√∫mero de Matrizes'},
        color='GAL_MATR', # Colorir por valor para gradiente
        color_continuous_scale=px.colors.sequential.Tealgrn, # Escala de cor elegante
        template="plotly_white" # Tema limpo
    )
    fig1.update_layout(
        xaxis_tickangle=-45,
        title_x=0.5, # Centralizar t√≠tulo
        plot_bgcolor='rgba(0,0,0,0)', # Fundo transparente
        paper_bgcolor='rgba(0,0,0,0)', # Fundo do papel transparente
        xaxis=dict(showgrid=True, gridcolor='lightgray'), # Mostrar grid no eixo X
        yaxis=dict(showgrid=True, gridcolor='lightgray') # Mostrar grid no eixo Y
    )
    fig1.update_traces(marker_line_color='black', marker_line_width=0.5) # Borda nas barras
    st.plotly_chart(fig1, use_container_width=True)
    
    with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Barras"):
        st.markdown("""
        **üîç An√°lise por Estado**
        
        üìå **Principais observa√ß√µes:**
        - **Mato Grosso do Sul** e **Pernambuco** lideram em n√∫mero absoluto de matrizes av√≠colas.
        - **Distrito Federal** e **Par√°** tamb√©m apresentam valores expressivos, compondo o grupo dos quatro estados com maior concentra√ß√£o.
        - A distribui√ß√£o √© bastante desigual, com alguns estados apresentando n√∫meros significativamente mais baixos.
        
        üí° **Interpreta√ß√£o:**
        - A concentra√ß√£o de matrizes em poucos estados pode refletir fatores como infraestrutura, tradi√ß√£o produtiva e incentivos regionais.
        - Estados do **Centro-Oeste** e **Nordeste** se destacam como polos importantes na produ√ß√£o de matrizes.
        - Estados com menor n√∫mero de matrizes podem representar oportunidades para crescimento e investimento no setor av√≠cola.
        """)
    
else:
    st.warning("N√£o h√° dados dispon√≠veis para os estados.")

# =============================================
# 2. GR√ÅFICO DE PIZZA - MATRIZES POR REGI√ÉO (Estilizado)
# =============================================
st.header('üåé Distribui√ß√£o Regional de Matrizes')

if not df_regioes.empty:
    # Processamento dos dados
    matrizes_por_regiao = df_regioes.groupby('NOM_TERR', as_index=False)['GAL_MATR'].sum()
    matrizes_por_regiao['Porcentagem'] = (matrizes_por_regiao['GAL_MATR'] / matrizes_por_regiao['GAL_MATR'].sum()) * 100
    
    # Gr√°fico interativo com cores mais vivas e tema elegante
    fig2 = px.pie(
        matrizes_por_regiao,
        values='GAL_MATR',
        names='NOM_TERR',
        title='Propor√ß√£o de Matrizes por Regi√£o',
        color_discrete_sequence=px.colors.qualitative.Pastel, # Uma paleta de cores suaves e agrad√°veis
        hover_data=['Porcentagem'],
        labels={'NOM_TERR': 'Regi√£o', 'GAL_MATR': 'Matrizes'},
        hole=0.4, # Adiciona um "buraco" para transformar em gr√°fico de rosca (donut chart)
        template="plotly_white"
    )
    fig2.update_traces(
        textposition='inside',
        textinfo='percent+label',
        marker=dict(line=dict(color='#000000', width=1)) # Adiciona bordas nas fatias
    )
    fig2.update_layout(title_x=0.5) # Centralizar t√≠tulo
    st.plotly_chart(fig2, use_container_width=True)
    
    with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Pizza"):
        st.info("""
        **üîç An√°lise por Regi√£o**
        
        üìå **Principais observa√ß√µes:**
        - **Nordeste** lidera com **40,2%** das matrizes av√≠colas do Brasil.
        - **Centro-Oeste** √© o segundo maior polo, com **30,7%**.
        - Sul, Norte e Sudeste t√™m participa√ß√µes menores (11,4%, 9,89% e 7,95%).
        
        üí° **Interpreta√ß√£o:**
        - Forte concentra√ß√£o da produ√ß√£o de matrizes nas regi√µes **Nordeste** e **Centro-Oeste**.
        - A distribui√ß√£o pode estar relacionada √† disponibilidade de √°reas, clima e incentivos regionais.
        - Indica a necessidade de estrat√©gias regionais para o desenvolvimento do setor.
        """)
else:
    st.warning("N√£o h√° dados dispon√≠veis para as regi√µes.")

# =============================================
# 3. GR√ÅFICO ADICIONAL - SISTEMAS DE CRIA√á√ÉO (Estilizado)
# =============================================
st.header('üè≠ Sistemas de Cria√ß√£o por Regi√£o')

if 'SIST_CRIA' in df.columns and not df_regioes.empty:
    # Processamento dos dados
    sistemas_por_regiao = df_regioes.groupby(['NOM_TERR', 'SIST_CRIA'])['GAL_MATR'].sum().reset_index()
    
    # Gr√°fico interativo com cores mais vivas e tema elegante
    fig3 = px.bar(
        sistemas_por_regiao,
        x='NOM_TERR',
        y='GAL_MATR',
        color='SIST_CRIA', # Esta coluna agora ter√° os nomes completos
        title='Sistemas de Cria√ß√£o por Regi√£o',
        labels={'NOM_TERR': 'Regi√£o', 'GAL_MATR': 'Matrizes', 'SIST_CRIA': 'Sistema de Cria√ß√£o'},
        barmode='group', # Para barras agrupadas
        color_discrete_sequence=px.colors.qualitative.Set2, # Outra paleta qualitativa vibrante
        template="plotly_white"
    )
    fig3.update_layout(
        title_x=0.5, # Centralizar t√≠tulo
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        xaxis=dict(showgrid=True, gridcolor='lightgray'),
        yaxis=dict(showgrid=True, gridcolor='lightgray'),
        legend_title_text='Sistema de Cria√ß√£o' # T√≠tulo para a legenda
    )
    st.plotly_chart(fig3, use_container_width=True)
    
    with st.expander("üí° Interpreta√ß√£o dos Sistemas de Cria√ß√£o por Regi√£o"):
        st.info("""
        **üîç An√°lise por Regi√£o ‚Äî Sistemas de Cria√ß√£o**

        üìå **Principais observa√ß√µes:**
        - O sistema de produ√ß√£o de ovos para consumo (**Produtores de ovos para consumo**) √© predominante no **Centro-Oeste**, **Nordeste** e **Sul**.
        - O **Nordeste** apresenta a maior quantidade de matrizes, especialmente no sistema **Produtores de ovos para consumo**, seguido por relevante participa√ß√£o do sistema **Produtores de frangos de corte**.
        - O **Sudeste** e o **Norte** possuem menor representatividade, com destaque para o Sudeste na produ√ß√£o de frangos de corte.
        - Baixa express√£o dos sistemas **Produtores de ovos para incuba√ß√£o** e **Outros produtores** em todas as regi√µes.

        üí° **Interpreta√ß√£o:**
        - H√° especializa√ß√£o regional nos sistemas de cria√ß√£o, com o **Centro-Oeste** e **Nordeste** se destacando na produ√ß√£o de ovos e o **Sudeste** e **Sul** mostrando varia√ß√µes nos tipos de produ√ß√£o.
        - As diferen√ßas refletem fatores como tradi√ß√£o produtiva, demanda de mercado e adequa√ß√£o das condi√ß√µes regionais.
        - Os resultados indicam a necessidade de estrat√©gias regionais para aprimorar a competitividade e a sustentabilidade do setor av√≠cola.
        """)
else:
    st.warning("A coluna 'SIST_CRIA' n√£o foi encontrada no dataset ou n√£o h√° dados para regi√µes.")

# =============================================
# 4. NOVO GR√ÅFICO: DISPERS√ÉO 3D (Elegante)
# =============================================
st.header('üåê Rela√ß√£o 3D: Matrizes, Galin√°ceos Totais e Trabalhadores por Sistema')

# Verifica√ß√£o para o gr√°fico 3D
cols_for_3d = ['GAL_MATR', 'GAL_TOTAL', 'N_TRAB_TOTAL', 'SIST_CRIA']
if all(col in df.columns for col in cols_for_3d):
    df_plot_3d = df.dropna(subset=cols_for_3d).copy()
    
    if not df_plot_3d.empty:
        fig_3d = px.scatter_3d(
            df_plot_3d,
            x='GAL_MATR',
            y='GAL_TOTAL',
            z='N_TRAB_TOTAL',
            color='SIST_CRIA', # Colorir por Sistema de Cria√ß√£o
            title='Distribui√ß√£o 3D de Matrizes, Galin√°ceos Totais e Trabalhadores',
            labels={
                'GAL_MATR': 'N√∫mero de Matrizes',
                'GAL_TOTAL': 'Total de Galin√°ceos',
                'N_TRAB_TOTAL': 'N√∫mero de Trabalhadores',
                'SIST_CRIA': 'Sistema de Cria√ß√£o'
            },
            color_discrete_sequence=px.colors.qualitative.Bold, # Paleta de cores vibrantes
            height=700,
            template="plotly_dark" # Tema escuro para um visual 3D impactante
        )

        fig_3d.update_layout(
            scene = dict(
                xaxis_title_text='N√∫mero de Matrizes',
                yaxis_title_text='Total de Galin√°ceos',
                zaxis_title_text='N√∫mero de Trabalhadores',
                # Ajuste da c√¢mera para uma vis√£o inicial mais interessante
                camera = dict(
                    eye=dict(x=1.8, y=1.8, z=0.8) # Um pouco de cima e de lado
                )
            ),
            title_x=0.5 # Centralizar t√≠tulo
        )
        
        st.plotly_chart(fig_3d, use_container_width=True)

        with st.expander("üí° Interpreta√ß√£o do Gr√°fico de Dispers√£o 3D"):
            st.info("""
            **üåê An√°lise do Gr√°fico de Dispers√£o 3D:**
            Este gr√°fico visualiza a inter-rela√ß√£o entre tr√™s m√©tricas-chave: o n√∫mero de matrizes, o total de galin√°ceos e o n√∫mero de trabalhadores, com cada ponto colorido pelo sistema de cria√ß√£o.

            üìå **Principais observa√ß√µes:**
            - **Agrupamentos:** Observe se existem agrupamentos de pontos para sistemas de cria√ß√£o espec√≠ficos em certas regi√µes do espa√ßo 3D, o que indicaria padr√µes de escala de produ√ß√£o e uso de m√£o de obra.
            - **Escalas:** Identifique se sistemas com muitas matrizes tamb√©m t√™m um alto n√∫mero de galin√°ceos totais e/ou trabalhadores.
            - **Outliers:** Pontos muito distantes dos demais podem representar granjas com perfis de produ√ß√£o ou opera√ß√£o incomuns para seu sistema.

            üí° **Interpreta√ß√£o:**
            - A distribui√ß√£o dos pontos pode revelar a efici√™ncia ou a intensidade de trabalho em diferentes sistemas de cria√ß√£o (e.g., granjas com muitas aves mas poucos trabalhadores podem ser altamente automatizadas).
            - Permite identificar se a produ√ß√£o de matrizes est√° correlacionada com o tamanho total do plantel e a for√ßa de trabalho, e como isso varia entre os sistemas.
            - √â uma ferramenta poderosa para entender a estrutura e a diversidade das opera√ß√µes av√≠colas em m√∫ltiplas dimens√µes.
            """)
    else:
        st.warning("N√£o h√° dados suficientes para gerar o gr√°fico de dispers√£o 3D ap√≥s a remo√ß√£o de valores ausentes.")
else:
    st.warning("Colunas necess√°rias para o gr√°fico 3D ('GAL_TOTAL' ou 'N_TRAB_TOTAL') n√£o foram encontradas no dataset.")

# Rodap√©
st.markdown("---")
st.caption("""
üîé *An√°lise desenvolvida com base nos dados do IBGE* üìÖ *Atualizado em Outubro 2023* """)

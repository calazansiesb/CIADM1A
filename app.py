import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="1. Distribui√ß√£o Geogr√°fica da Produ√ß√£o Av√≠cola:",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title('An√°lise de Galin√°ceos no Brasil')
st.info("Use o menu lateral √† esquerda para acessar as outras p√°ginas.")

# Fun√ß√£o para limpar valores num√©ricos
def clean_numeric_value(x):
    if isinstance(x, str):
        cleaned_value = ''.join(c for c in x if c.isdigit() or c == '.' or c == ',')
        cleaned_value = cleaned_value.replace(',', '.', 1)
        return cleaned_value
    return x

# Carregar o DataFrame
try:
    df = pd.read_csv("GALINACEOS.csv", sep=';')
except FileNotFoundError:
    st.error("Erro: Arquivo 'GALINACEOS.csv' n√£o encontrado.")
    st.stop()

# Garantir que E_SUBS e E_COMERC s√£o num√©ricos
for col in ['E_SUBS', 'E_COMERC']:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

# Limpar a coluna 'GAL_TOTAL'
if 'GAL_TOTAL' in df.columns:
    df['GAL_TOTAL'] = df['GAL_TOTAL'].apply(clean_numeric_value)
    df['GAL_TOTAL'] = df['GAL_TOTAL'].replace('', np.nan)
    df['GAL_TOTAL'] = pd.to_numeric(df['GAL_TOTAL'], errors='coerce')

# =======================
# 1. Gr√°fico Interativo - Propor√ß√£o dos Sistemas de Cria√ß√£o
# =======================

st.header('Propor√ß√£o dos Sistemas de Cria√ß√£o')
st.info(
    'Pergunta: Qual √© a propor√ß√£o de estabelecimentos dedicados a cada tipo de explora√ß√£o\n'
    '(corte, postura, reprodu√ß√£o, misto)? Existe algum tipo de explora√ß√£o predominante em certas regi√µes?'
)

if 'SIST_CRIA' in df.columns:
    freq_sistema_cria = df['SIST_CRIA'].value_counts()
    prop_sistema_cria = df['SIST_CRIA'].value_counts(normalize=True) * 100

    st.subheader('Frequ√™ncia dos Sistemas de Cria√ß√£o')
    st.dataframe(freq_sistema_cria)

    fig_pie = px.pie(df, names="SIST_CRIA", title="Propor√ß√£o dos Sistemas de Cria√ß√£o", hover_data=["SIST_CRIA"])
    st.plotly_chart(fig_pie)

# =======================
# 2. Gr√°fico Interativo - Distribui√ß√£o dos Sistemas de Cria√ß√£o por UF
# =======================
st.header('Distribui√ß√£o dos Sistemas de Cria√ß√£o por UF')

if 'NOM_TERR' in df.columns and 'SIST_CRIA' in df.columns:
    dist_sistema_cria_por_uf = df.groupby('NOM_TERR')['SIST_CRIA'].value_counts(normalize=True).reset_index()
    dist_sistema_cria_por_uf.columns = ['UF', 'SIST_CRIA', 'Propor√ß√£o']

    fig_bar = px.bar(
        dist_sistema_cria_por_uf, x="UF", y="Propor√ß√£o", color="SIST_CRIA", 
        title="Distribui√ß√£o dos Sistemas de Cria√ß√£o por UF", 
        labels={"UF": "Unidade Federativa", "Propor√ß√£o": "Percentual"},
        hover_data=["SIST_CRIA", "Propor√ß√£o"]
    )

    st.plotly_chart(fig_bar)

# =======================
# 3. Gr√°fico Interativo - An√°lise da M√£o de Obra no Setor Av√≠cola
# =======================
st.header('An√°lise da M√£o de Obra no Setor Av√≠cola')
st.header('Estat√≠sticas Descritivas dos Trabalhadores')
if 'N_TRAB_PERM' in df.columns and 'N_TRAB_TEMP' in df.columns:
    st.subheader('Trabalhadores Permanentes')
    st.write(df['N_TRAB_PERM'].describe())
    st.subheader('Trabalhadores Tempor√°rios')
    st.write(df['N_TRAB_TEMP'].describe())
    if 'N_TRAB_TOTAL' in df.columns:
        st.subheader('Total de Trabalhadores')
        st.write(df['N_TRAB_TOTAL'].describe())

st.header('Correla√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores')
if 'GAL_TOTAL' in df.columns and 'N_TRAB_TOTAL' in df.columns:
    # Garantir que as colunas s√£o num√©ricas
    df['GAL_TOTAL'] = pd.to_numeric(df['GAL_TOTAL'], errors='coerce')
    df['N_TRAB_TOTAL'] = pd.to_numeric(df['N_TRAB_TOTAL'], errors='coerce')
    cor = df[['GAL_TOTAL', 'N_TRAB_TOTAL']].corr().loc['GAL_TOTAL', 'N_TRAB_TOTAL']
    st.write(f'A correla√ß√£o entre n√∫mero total de aves e n√∫mero de trabalhadores √©: **{cor:.2f}**')

    # Visualiza√ß√£o
    fig = px.scatter(
        df, x='GAL_TOTAL', y='N_TRAB_TOTAL',
        labels={'GAL_TOTAL': 'Total de Aves', 'N_TRAB_TOTAL': 'Total de Trabalhadores'},
        title='Rela√ß√£o entre Tamanho do Estabelecimento e N√∫mero de Trabalhadores',
        trendline="ols"  # Adiciona linha de tend√™ncia
    )
    st.plotly_chart(fig)

if 'N_TRAB_TOTAL' in df.columns and 'GAL_TOTAL' in df.columns:
    df['N_TRAB_TOTAL'] = pd.to_numeric(df['N_TRAB_TOTAL'], errors='coerce')
    df['GAL_TOTAL'] = pd.to_numeric(df['GAL_TOTAL'], errors='coerce')

    fig_scatter = px.scatter(
        df, x="GAL_TOTAL", y="N_TRAB_TOTAL", title="Tamanho do Estabelecimento vs. N√∫mero de Trabalhadores", 
        labels={"GAL_TOTAL": "Total de Galin√°ceos", "N_TRAB_TOTAL": "N√∫mero de Trabalhadores"},
        hover_data=["GAL_TOTAL", "N_TRAB_TOTAL"]
    )
    
    st.plotly_chart(fig_scatter)

# =======================
# 4. Gr√°fico Interativo - M√©dia de GAL_TOTAL por Grupo de Tamanho
# =======================
st.header('M√©dia de GAL_TOTAL por Grupo de Tamanho')
st.info(
    '''Explora√ß√£o: Analisar a frequ√™ncia dos tipos de instala√ß√µes. Agrupar os estabelecimentos por 
    faixas de n√∫mero de aves e verificar a propor√ß√£o de cada tipo de instala√ß√£o em cada faixa. '''
)
if 'Q_DZ_PROD' in df.columns and 'GAL_TOTAL' in df.columns:
    df['Q_DZ_PROD'] = pd.to_numeric(df['Q_DZ_PROD'], errors='coerce')
    df['GAL_TOTAL'] = pd.to_numeric(df['GAL_TOTAL'], errors='coerce')

    df.loc[df['Q_DZ_PROD'].notna(), 'TAMANHO_GRUPO'] = pd.qcut(df.loc[df['Q_DZ_PROD'].notna(), 'Q_DZ_PROD'], q=3, labels=['Pequeno', 'M√©dio', 'Grande'])

    variavel_por_grupo = df.groupby('TAMANHO_GRUPO')['GAL_TOTAL'].mean().reset_index()
    
    fig_bar_size = px.bar(
        variavel_por_grupo, x="TAMANHO_GRUPO", y="GAL_TOTAL", title="M√©dia de GAL_TOTAL por Grupo de Tamanho",
        labels={"TAMANHO_GRUPO": "Grupo de Tamanho", "GAL_TOTAL": "M√©dia de Galin√°ceos"},
        hover_data=["GAL_TOTAL"]
    )
    
    st.plotly_chart(fig_bar_size)
